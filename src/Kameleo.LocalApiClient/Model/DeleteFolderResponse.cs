/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// DeleteFolderResponse
    /// </summary>
    [DataContract(Name = "DeleteFolderResponse")]
    public partial class DeleteFolderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteFolderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeleteFolderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteFolderResponse" /> class.
        /// </summary>
        /// <param name="deletedFolders">Ids of the deleted folders. (required).</param>
        /// <param name="deletedProfiles">Ids of the deleted profiles. (required).</param>
        /// <param name="movedProfiles">Ids of the profiles moved to top-level. (required).</param>
        public DeleteFolderResponse(List<Guid> deletedFolders = default, List<Guid> deletedProfiles = default, List<ProfilePreview> movedProfiles = default)
        {
            // to ensure "deletedFolders" is required (not null)
            if (deletedFolders == null)
            {
                throw new ArgumentNullException("deletedFolders is a required property for DeleteFolderResponse and cannot be null");
            }
            this.DeletedFolders = deletedFolders;
            // to ensure "deletedProfiles" is required (not null)
            if (deletedProfiles == null)
            {
                throw new ArgumentNullException("deletedProfiles is a required property for DeleteFolderResponse and cannot be null");
            }
            this.DeletedProfiles = deletedProfiles;
            // to ensure "movedProfiles" is required (not null)
            if (movedProfiles == null)
            {
                throw new ArgumentNullException("movedProfiles is a required property for DeleteFolderResponse and cannot be null");
            }
            this.MovedProfiles = movedProfiles;
        }

        /// <summary>
        /// Ids of the deleted folders.
        /// </summary>
        /// <value>Ids of the deleted folders.</value>
        [DataMember(Name = "deletedFolders", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> DeletedFolders { get; set; }

        /// <summary>
        /// Ids of the deleted profiles.
        /// </summary>
        /// <value>Ids of the deleted profiles.</value>
        [DataMember(Name = "deletedProfiles", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> DeletedProfiles { get; set; }

        /// <summary>
        /// Ids of the profiles moved to top-level.
        /// </summary>
        /// <value>Ids of the profiles moved to top-level.</value>
        [DataMember(Name = "movedProfiles", IsRequired = true, EmitDefaultValue = true)]
        public List<ProfilePreview> MovedProfiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteFolderResponse {\n");
            sb.Append("  DeletedFolders: ").Append(DeletedFolders).Append("\n");
            sb.Append("  DeletedProfiles: ").Append(DeletedProfiles).Append("\n");
            sb.Append("  MovedProfiles: ").Append(MovedProfiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
