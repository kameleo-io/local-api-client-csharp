/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// KernelResponse
    /// </summary>
    [DataContract(Name = "KernelResponse")]
    public partial class KernelResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KernelResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KernelResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KernelResponse" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the kernel. (required).</param>
        /// <param name="platform">The operating system this kernel supports (e.g: win-x64, osx-arm64). (required).</param>
        /// <param name="browser">The browser this kernel contains (e.g: chroma, junglefox). (required).</param>
        /// <param name="varVersion">Version of the browser. (required).</param>
        /// <param name="builtAt">Build timestamp of the kernel. (required).</param>
        /// <param name="downloadSize">Size of the download package in bytes. (required).</param>
        /// <param name="diskSize">Size of the extracted package on the local file system in bytes or null if the kernel is not installed..</param>
        /// <param name="isInstalled">Flag indicating if the kernel is locally available (true) or it has to be installed before usage (false). (required).</param>
        /// <param name="isInUse">Flag indicating if the kernel is currently in use. (required).</param>
        /// <param name="isMarkedForRemoval">Flag indicating that the kernel will be removed from the local file system when it is not in use. (required).</param>
        public KernelResponse(Guid id = default, string platform = default, string browser = default, string varVersion = default, DateTime builtAt = default, long downloadSize = default, long? diskSize = default, bool isInstalled = default, bool isInUse = default, bool isMarkedForRemoval = default)
        {
            this.Id = id;
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new ArgumentNullException("platform is a required property for KernelResponse and cannot be null");
            }
            this.Platform = platform;
            // to ensure "browser" is required (not null)
            if (browser == null)
            {
                throw new ArgumentNullException("browser is a required property for KernelResponse and cannot be null");
            }
            this.Browser = browser;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for KernelResponse and cannot be null");
            }
            this.VarVersion = varVersion;
            this.BuiltAt = builtAt;
            this.DownloadSize = downloadSize;
            this.IsInstalled = isInstalled;
            this.IsInUse = isInUse;
            this.IsMarkedForRemoval = isMarkedForRemoval;
            this.DiskSize = diskSize;
        }

        /// <summary>
        /// Unique identifier of the kernel.
        /// </summary>
        /// <value>Unique identifier of the kernel.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// The operating system this kernel supports (e.g: win-x64, osx-arm64).
        /// </summary>
        /// <value>The operating system this kernel supports (e.g: win-x64, osx-arm64).</value>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = true)]
        public string Platform { get; set; }

        /// <summary>
        /// The browser this kernel contains (e.g: chroma, junglefox).
        /// </summary>
        /// <value>The browser this kernel contains (e.g: chroma, junglefox).</value>
        [DataMember(Name = "browser", IsRequired = true, EmitDefaultValue = true)]
        public string Browser { get; set; }

        /// <summary>
        /// Version of the browser.
        /// </summary>
        /// <value>Version of the browser.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Build timestamp of the kernel.
        /// </summary>
        /// <value>Build timestamp of the kernel.</value>
        [DataMember(Name = "builtAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime BuiltAt { get; set; }

        /// <summary>
        /// Size of the download package in bytes.
        /// </summary>
        /// <value>Size of the download package in bytes.</value>
        [DataMember(Name = "downloadSize", IsRequired = true, EmitDefaultValue = true)]
        public long DownloadSize { get; set; }

        /// <summary>
        /// Size of the extracted package on the local file system in bytes or null if the kernel is not installed.
        /// </summary>
        /// <value>Size of the extracted package on the local file system in bytes or null if the kernel is not installed.</value>
        [DataMember(Name = "diskSize", EmitDefaultValue = true)]
        public long? DiskSize { get; set; }

        /// <summary>
        /// Flag indicating if the kernel is locally available (true) or it has to be installed before usage (false).
        /// </summary>
        /// <value>Flag indicating if the kernel is locally available (true) or it has to be installed before usage (false).</value>
        [DataMember(Name = "isInstalled", IsRequired = true, EmitDefaultValue = true)]
        public bool IsInstalled { get; set; }

        /// <summary>
        /// Flag indicating if the kernel is currently in use.
        /// </summary>
        /// <value>Flag indicating if the kernel is currently in use.</value>
        [DataMember(Name = "isInUse", IsRequired = true, EmitDefaultValue = true)]
        public bool IsInUse { get; set; }

        /// <summary>
        /// Flag indicating that the kernel will be removed from the local file system when it is not in use.
        /// </summary>
        /// <value>Flag indicating that the kernel will be removed from the local file system when it is not in use.</value>
        [DataMember(Name = "isMarkedForRemoval", IsRequired = true, EmitDefaultValue = true)]
        public bool IsMarkedForRemoval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KernelResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  BuiltAt: ").Append(BuiltAt).Append("\n");
            sb.Append("  DownloadSize: ").Append(DownloadSize).Append("\n");
            sb.Append("  DiskSize: ").Append(DiskSize).Append("\n");
            sb.Append("  IsInstalled: ").Append(IsInstalled).Append("\n");
            sb.Append("  IsInUse: ").Append(IsInUse).Append("\n");
            sb.Append("  IsMarkedForRemoval: ").Append(IsMarkedForRemoval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Platform (string) minLength
            if (this.Platform != null && this.Platform.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Platform, length must be greater than 1.", new[] { "Platform" });
            }

            // Browser (string) minLength
            if (this.Browser != null && this.Browser.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Browser, length must be greater than 1.", new[] { "Browser" });
            }

            yield break;
        }
    }

}
