/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// UserInfoResponse
    /// </summary>
    [DataContract(Name = "UserInfoResponse")]
    public partial class UserInfoResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfoResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserInfoResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfoResponse" /> class.
        /// </summary>
        /// <param name="userId">Unique identifier for the user in Guid v4 format. (required).</param>
        /// <param name="displayName">The display name of the user, updated on each login. (required).</param>
        /// <param name="email">The email address of the user. (required).</param>
        /// <param name="emailConfirmed">Indicates if the user&#39;s email address has been verified. (required).</param>
        /// <param name="subscriptionEnd">The subscription end date for the user. If the user is part of a team, this is the team&#39;s subscription end date. (required).</param>
        /// <param name="plan">The subscription plan associated with the user. (required).</param>
        /// <param name="capabilities">List of features available to the user based on their current subscription or their team&#39;s subscription. (required).</param>
        /// <param name="gracePeriod">Indicates if the user&#39;s subscription is currently in a grace period and requires instant renewal. (required).</param>
        /// <param name="lastAppLogin">The date and time of the user&#39;s last login via the app. (required).</param>
        /// <param name="workspaceFolder">Path to the user&#39;s workspace folder where profiles are stored. Modifying these files outside of Kameleo is strictly prohibited. (required).</param>
        /// <param name="localStorage">Current usage and maximum limit for local profiles. (required).</param>
        /// <param name="cloudStorage">Current usage and maximum limit for cloud profiles. (required).</param>
        /// <param name="hasTeamSubscription">Indicates if the user has a team subscription. This can also be true if the user does not have any team members yet. (required).</param>
        /// <param name="teamId">The team ID if the user is part of a team..</param>
        /// <param name="teamRole">The user&#39;s role within the team, such as &#39;owner&#39; or &#39;member&#39;..</param>
        /// <param name="runningUserProfiles">Current usage and maximum limit of running manual and automated profiles for the logged-in user..</param>
        /// <param name="runningTeamProfiles">Current usage and maximum limit of running manual and automated profiles across the user&#39;s team..</param>
        /// <param name="runningTenantProfiles">Current usage and maximum limit of running manual and automated profiles across the tenant..</param>
        /// <param name="profileMinutes">Current usage and maximum limit of profile minutes across the tenant..</param>
        public UserInfoResponse(Guid userId = default, string displayName = default, string email = default, bool emailConfirmed = default, DateTime subscriptionEnd = default, string plan = default, List<string> capabilities = default, bool gracePeriod = default, DateTime lastAppLogin = default, string workspaceFolder = default, QuotaStatistics localStorage = default, QuotaStatistics cloudStorage = default, bool hasTeamSubscription = default, Guid? teamId = default, string teamRole = default, RunningProfilesStatistics runningUserProfiles = default, RunningProfilesStatistics runningTeamProfiles = default, RunningProfilesStatistics runningTenantProfiles = default, ProfileMinutesQuota profileMinutes = default)
        {
            this.UserId = userId;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for UserInfoResponse and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for UserInfoResponse and cannot be null");
            }
            this.Email = email;
            this.EmailConfirmed = emailConfirmed;
            this.SubscriptionEnd = subscriptionEnd;
            // to ensure "plan" is required (not null)
            if (plan == null)
            {
                throw new ArgumentNullException("plan is a required property for UserInfoResponse and cannot be null");
            }
            this.Plan = plan;
            // to ensure "capabilities" is required (not null)
            if (capabilities == null)
            {
                throw new ArgumentNullException("capabilities is a required property for UserInfoResponse and cannot be null");
            }
            this.Capabilities = capabilities;
            this.GracePeriod = gracePeriod;
            this.LastAppLogin = lastAppLogin;
            // to ensure "workspaceFolder" is required (not null)
            if (workspaceFolder == null)
            {
                throw new ArgumentNullException("workspaceFolder is a required property for UserInfoResponse and cannot be null");
            }
            this.WorkspaceFolder = workspaceFolder;
            // to ensure "localStorage" is required (not null)
            if (localStorage == null)
            {
                throw new ArgumentNullException("localStorage is a required property for UserInfoResponse and cannot be null");
            }
            this.LocalStorage = localStorage;
            // to ensure "cloudStorage" is required (not null)
            if (cloudStorage == null)
            {
                throw new ArgumentNullException("cloudStorage is a required property for UserInfoResponse and cannot be null");
            }
            this.CloudStorage = cloudStorage;
            this.HasTeamSubscription = hasTeamSubscription;
            this.TeamId = teamId;
            this.TeamRole = teamRole;
            this.RunningUserProfiles = runningUserProfiles;
            this.RunningTeamProfiles = runningTeamProfiles;
            this.RunningTenantProfiles = runningTenantProfiles;
            this.ProfileMinutes = profileMinutes;
        }

        /// <summary>
        /// Unique identifier for the user in Guid v4 format.
        /// </summary>
        /// <value>Unique identifier for the user in Guid v4 format.</value>
        /*
        <example>054c78aa-efef-4a15-a348-cbf1766f8970</example>
        */
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// The display name of the user, updated on each login.
        /// </summary>
        /// <value>The display name of the user, updated on each login.</value>
        /*
        <example>user</example>
        */
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        /// <value>The email address of the user.</value>
        /*
        <example>user@email.com</example>
        */
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Indicates if the user&#39;s email address has been verified.
        /// </summary>
        /// <value>Indicates if the user&#39;s email address has been verified.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "emailConfirmed", IsRequired = true, EmitDefaultValue = true)]
        public bool EmailConfirmed { get; set; }

        /// <summary>
        /// The subscription end date for the user. If the user is part of a team, this is the team&#39;s subscription end date.
        /// </summary>
        /// <value>The subscription end date for the user. If the user is part of a team, this is the team&#39;s subscription end date.</value>
        /*
        <example>2038-01-19T03:14:07Z</example>
        */
        [DataMember(Name = "subscriptionEnd", IsRequired = true, EmitDefaultValue = true)]
        public DateTime SubscriptionEnd { get; set; }

        /// <summary>
        /// The subscription plan associated with the user.
        /// </summary>
        /// <value>The subscription plan associated with the user.</value>
        /*
        <example>free</example>
        */
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = true)]
        public string Plan { get; set; }

        /// <summary>
        /// List of features available to the user based on their current subscription or their team&#39;s subscription.
        /// </summary>
        /// <value>List of features available to the user based on their current subscription or their team&#39;s subscription.</value>
        /*
        <example>[&quot;clone_profile&quot;,&quot;cloud&quot;,&quot;cookie&quot;,&quot;groups&quot;,&quot;impex&quot;,&quot;local&quot;,&quot;mobile&quot;,&quot;proxy_test&quot;,&quot;start&quot;,&quot;upgrade_profile&quot;]</example>
        */
        [DataMember(Name = "capabilities", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Indicates if the user&#39;s subscription is currently in a grace period and requires instant renewal.
        /// </summary>
        /// <value>Indicates if the user&#39;s subscription is currently in a grace period and requires instant renewal.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "gracePeriod", IsRequired = true, EmitDefaultValue = true)]
        public bool GracePeriod { get; set; }

        /// <summary>
        /// The date and time of the user&#39;s last login via the app.
        /// </summary>
        /// <value>The date and time of the user&#39;s last login via the app.</value>
        /*
        <example>2020-01-01T00:00Z</example>
        */
        [DataMember(Name = "lastAppLogin", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastAppLogin { get; set; }

        /// <summary>
        /// Path to the user&#39;s workspace folder where profiles are stored. Modifying these files outside of Kameleo is strictly prohibited.
        /// </summary>
        /// <value>Path to the user&#39;s workspace folder where profiles are stored. Modifying these files outside of Kameleo is strictly prohibited.</value>
        /*
        <example>C:\Users\Tomi\AppData\Local\Programs\Kameleo\Workspace\cb2bdd5e-6777-4d9b-9573-d3209186f686</example>
        */
        [DataMember(Name = "workspaceFolder", IsRequired = true, EmitDefaultValue = true)]
        public string WorkspaceFolder { get; set; }

        /// <summary>
        /// Current usage and maximum limit for local profiles.
        /// </summary>
        /// <value>Current usage and maximum limit for local profiles.</value>
        [DataMember(Name = "localStorage", IsRequired = true, EmitDefaultValue = true)]
        public QuotaStatistics LocalStorage { get; set; }

        /// <summary>
        /// Current usage and maximum limit for cloud profiles.
        /// </summary>
        /// <value>Current usage and maximum limit for cloud profiles.</value>
        [DataMember(Name = "cloudStorage", IsRequired = true, EmitDefaultValue = true)]
        public QuotaStatistics CloudStorage { get; set; }

        /// <summary>
        /// Indicates if the user has a team subscription. This can also be true if the user does not have any team members yet.
        /// </summary>
        /// <value>Indicates if the user has a team subscription. This can also be true if the user does not have any team members yet.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hasTeamSubscription", IsRequired = true, EmitDefaultValue = true)]
        public bool HasTeamSubscription { get; set; }

        /// <summary>
        /// The team ID if the user is part of a team.
        /// </summary>
        /// <value>The team ID if the user is part of a team.</value>
        /*
        <example>099c78aa-efef-4a15-a348-cbf1766f8000</example>
        */
        [DataMember(Name = "teamId", EmitDefaultValue = true)]
        public Guid? TeamId { get; set; }

        /// <summary>
        /// The user&#39;s role within the team, such as &#39;owner&#39; or &#39;member&#39;.
        /// </summary>
        /// <value>The user&#39;s role within the team, such as &#39;owner&#39; or &#39;member&#39;.</value>
        /*
        <example>member</example>
        */
        [DataMember(Name = "teamRole", EmitDefaultValue = true)]
        public string TeamRole { get; set; }

        /// <summary>
        /// Current usage and maximum limit of running manual and automated profiles for the logged-in user.
        /// </summary>
        /// <value>Current usage and maximum limit of running manual and automated profiles for the logged-in user.</value>
        [DataMember(Name = "runningUserProfiles", EmitDefaultValue = true)]
        public RunningProfilesStatistics RunningUserProfiles { get; set; }

        /// <summary>
        /// Current usage and maximum limit of running manual and automated profiles across the user&#39;s team.
        /// </summary>
        /// <value>Current usage and maximum limit of running manual and automated profiles across the user&#39;s team.</value>
        [DataMember(Name = "runningTeamProfiles", EmitDefaultValue = true)]
        public RunningProfilesStatistics RunningTeamProfiles { get; set; }

        /// <summary>
        /// Current usage and maximum limit of running manual and automated profiles across the tenant.
        /// </summary>
        /// <value>Current usage and maximum limit of running manual and automated profiles across the tenant.</value>
        [DataMember(Name = "runningTenantProfiles", EmitDefaultValue = true)]
        public RunningProfilesStatistics RunningTenantProfiles { get; set; }

        /// <summary>
        /// Current usage and maximum limit of profile minutes across the tenant.
        /// </summary>
        /// <value>Current usage and maximum limit of profile minutes across the tenant.</value>
        [DataMember(Name = "profileMinutes", EmitDefaultValue = true)]
        public ProfileMinutesQuota ProfileMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserInfoResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
            sb.Append("  SubscriptionEnd: ").Append(SubscriptionEnd).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  LastAppLogin: ").Append(LastAppLogin).Append("\n");
            sb.Append("  WorkspaceFolder: ").Append(WorkspaceFolder).Append("\n");
            sb.Append("  LocalStorage: ").Append(LocalStorage).Append("\n");
            sb.Append("  CloudStorage: ").Append(CloudStorage).Append("\n");
            sb.Append("  HasTeamSubscription: ").Append(HasTeamSubscription).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  TeamRole: ").Append(TeamRole).Append("\n");
            sb.Append("  RunningUserProfiles: ").Append(RunningUserProfiles).Append("\n");
            sb.Append("  RunningTeamProfiles: ").Append(RunningTeamProfiles).Append("\n");
            sb.Append("  RunningTenantProfiles: ").Append(RunningTenantProfiles).Append("\n");
            sb.Append("  ProfileMinutes: ").Append(ProfileMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
