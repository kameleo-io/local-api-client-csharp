/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// FolderResponse
    /// </summary>
    [DataContract(Name = "FolderResponse")]
    public partial class FolderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FolderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FolderResponse" /> class.
        /// </summary>
        /// <param name="id">A unique identifier of the folder. (required).</param>
        /// <param name="name">The name of the folder. (required).</param>
        /// <param name="lastModifiedAt">Timestamp of the last modification. (required).</param>
        /// <param name="lastModifiedBy">Name of the user who last modified the folder. (required).</param>
        /// <param name="createdAt">Timestamp of the creation. (required).</param>
        /// <param name="createdBy">Name of the user who created the folder. (required).</param>
        /// <param name="profiles">List of profiles in the current folder. (required).</param>
        /// <param name="shareAccesses">List of users accessing this folder. (required).</param>
        public FolderResponse(Guid id = default, string name = default, DateTime lastModifiedAt = default, string lastModifiedBy = default, DateTime createdAt = default, string createdBy = default, List<ProfilePreview> profiles = default, List<ShareAccess> shareAccesses = default)
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FolderResponse and cannot be null");
            }
            this.Name = name;
            this.LastModifiedAt = lastModifiedAt;
            // to ensure "lastModifiedBy" is required (not null)
            if (lastModifiedBy == null)
            {
                throw new ArgumentNullException("lastModifiedBy is a required property for FolderResponse and cannot be null");
            }
            this.LastModifiedBy = lastModifiedBy;
            this.CreatedAt = createdAt;
            // to ensure "createdBy" is required (not null)
            if (createdBy == null)
            {
                throw new ArgumentNullException("createdBy is a required property for FolderResponse and cannot be null");
            }
            this.CreatedBy = createdBy;
            // to ensure "profiles" is required (not null)
            if (profiles == null)
            {
                throw new ArgumentNullException("profiles is a required property for FolderResponse and cannot be null");
            }
            this.Profiles = profiles;
            // to ensure "shareAccesses" is required (not null)
            if (shareAccesses == null)
            {
                throw new ArgumentNullException("shareAccesses is a required property for FolderResponse and cannot be null");
            }
            this.ShareAccesses = shareAccesses;
        }

        /// <summary>
        /// A unique identifier of the folder.
        /// </summary>
        /// <value>A unique identifier of the folder.</value>
        /*
        <example>a7cafbbe-6bc0-4575-8c6e-f1adf391f180</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// The name of the folder.
        /// </summary>
        /// <value>The name of the folder.</value>
        /*
        <example>mystic-turtle</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Timestamp of the last modification.
        /// </summary>
        /// <value>Timestamp of the last modification.</value>
        /*
        <example>2020-05-02T03:10:32.245270100+10:00</example>
        */
        [DataMember(Name = "lastModifiedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastModifiedAt { get; set; }

        /// <summary>
        /// Name of the user who last modified the folder.
        /// </summary>
        /// <value>Name of the user who last modified the folder.</value>
        /*
        <example>Demo user</example>
        */
        [DataMember(Name = "lastModifiedBy", IsRequired = true, EmitDefaultValue = true)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Timestamp of the creation.
        /// </summary>
        /// <value>Timestamp of the creation.</value>
        /*
        <example>2020-05-02T03:10:32.245270100+10:00</example>
        */
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Name of the user who created the folder.
        /// </summary>
        /// <value>Name of the user who created the folder.</value>
        /*
        <example>Demo user</example>
        */
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// List of profiles in the current folder.
        /// </summary>
        /// <value>List of profiles in the current folder.</value>
        [DataMember(Name = "profiles", IsRequired = true, EmitDefaultValue = true)]
        public List<ProfilePreview> Profiles { get; set; }

        /// <summary>
        /// List of users accessing this folder.
        /// </summary>
        /// <value>List of users accessing this folder.</value>
        [DataMember(Name = "shareAccesses", IsRequired = true, EmitDefaultValue = true)]
        public List<ShareAccess> ShareAccesses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FolderResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LastModifiedAt: ").Append(LastModifiedAt).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  ShareAccesses: ").Append(ShareAccesses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
