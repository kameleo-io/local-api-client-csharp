/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// ProfileResponse
    /// </summary>
    [DataContract(Name = "ProfileResponse")]
    public partial class ProfileResponse : IValidatableObject
    {

        /// <summary>
        /// Specifies how the canvas will be spoofed. Possible values:  &#39;intelligent&#39;: Use intelligent canvas spoofing. This will result non-unique canvas fingerprints.  &#39;noise&#39;: Add some noise to canvas generation.  &#39;block&#39;: Completely block the 2D API.  &#39;off&#39;: Turn off the spoofing, use the original settings.
        /// </summary>
        /// <value>Specifies how the canvas will be spoofed. Possible values:  &#39;intelligent&#39;: Use intelligent canvas spoofing. This will result non-unique canvas fingerprints.  &#39;noise&#39;: Add some noise to canvas generation.  &#39;block&#39;: Completely block the 2D API.  &#39;off&#39;: Turn off the spoofing, use the original settings.</value>
        [DataMember(Name = "canvas", IsRequired = true, EmitDefaultValue = true)]
        public CanvasSpoofingType Canvas { get; set; }

        /// <summary>
        /// Specifies how the WebGL will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the WebGL generation  &#39;block&#39;: Completely block the 3D API  &#39;off&#39;: Turn off the spoofing, use the original settings
        /// </summary>
        /// <value>Specifies how the WebGL will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the WebGL generation  &#39;block&#39;: Completely block the 3D API  &#39;off&#39;: Turn off the spoofing, use the original settings</value>
        [DataMember(Name = "webgl", IsRequired = true, EmitDefaultValue = true)]
        public WebglSpoofingType Webgl { get; set; }

        /// <summary>
        /// Specifies how the audio will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the Audio generation  &#39;block&#39;: Completely block the Audio API  &#39;off&#39;: Turn off the spoofing, use the original settings
        /// </summary>
        /// <value>Specifies how the audio will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the Audio generation  &#39;block&#39;: Completely block the Audio API  &#39;off&#39;: Turn off the spoofing, use the original settings</value>
        [DataMember(Name = "audio", IsRequired = true, EmitDefaultValue = true)]
        public AudioSpoofingType Audio { get; set; }

        /// <summary>
        /// Specifies how the fonts will be spoofed. Possible values:  &#39;automatic&#39;: Spoof fonts based on the browser fingerpint.  &#39;off&#39;: Don&#39;t spoof fonts, use the real fonts of your machine.
        /// </summary>
        /// <value>Specifies how the fonts will be spoofed. Possible values:  &#39;automatic&#39;: Spoof fonts based on the browser fingerpint.  &#39;off&#39;: Don&#39;t spoof fonts, use the real fonts of your machine.</value>
        [DataMember(Name = "fonts", IsRequired = true, EmitDefaultValue = true)]
        public FontSpoofingType Fonts { get; set; }

        /// <summary>
        /// Defines whether the browser can save login credentials. Possible values are:  &#39;enabled&#39;: Credential saving is allowed.  &#39;disabled&#39;: Credential saving is blocked.
        /// </summary>
        /// <value>Defines whether the browser can save login credentials. Possible values are:  &#39;enabled&#39;: Credential saving is allowed.  &#39;disabled&#39;: Credential saving is blocked.</value>
        [DataMember(Name = "passwordManager", IsRequired = true, EmitDefaultValue = true)]
        public PasswordManagerType PasswordManager { get; set; }

        /// <summary>
        /// Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated.
        /// </summary>
        /// <value>Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated.</value>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public ProfileStorageLocation? Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResponse" /> class.
        /// </summary>
        /// <param name="id">A unique identifier of the profile (required).</param>
        /// <param name="name">Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator. (required).</param>
        /// <param name="tags">Profile tags (required).</param>
        /// <param name="createdAt">Date when the profile was created. (required).</param>
        /// <param name="fingerprint">Provides a full view of a fingerprint, which encapsulates real-world browser fingerprint configurations used to  instantiate virtual browser profiles. (required).</param>
        /// <param name="canvas">Specifies how the canvas will be spoofed. Possible values:  &#39;intelligent&#39;: Use intelligent canvas spoofing. This will result non-unique canvas fingerprints.  &#39;noise&#39;: Add some noise to canvas generation.  &#39;block&#39;: Completely block the 2D API.  &#39;off&#39;: Turn off the spoofing, use the original settings. (required).</param>
        /// <param name="webgl">Specifies how the WebGL will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the WebGL generation  &#39;block&#39;: Completely block the 3D API  &#39;off&#39;: Turn off the spoofing, use the original settings (required).</param>
        /// <param name="webglMeta">Sets how the WebGL Vendor and Renderer will be spoofed. Possible values:  &#39;automatic&#39;: The vendor and renderer values comes from the fingerprint.  &#39;manual&#39;: Manually set the vendor and renderer values.  &#39;off&#39;: Turn off the spoofing, use the original settings (required).</param>
        /// <param name="audio">Specifies how the audio will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the Audio generation  &#39;block&#39;: Completely block the Audio API  &#39;off&#39;: Turn off the spoofing, use the original settings (required).</param>
        /// <param name="timezone">Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. (required).</param>
        /// <param name="geolocation">Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;. (required).</param>
        /// <param name="proxy">Proxy connection settings of the profiles. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server is provided. (required).</param>
        /// <param name="webRtc">Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;. (required).</param>
        /// <param name="fonts">Specifies how the fonts will be spoofed. Possible values:  &#39;automatic&#39;: Spoof fonts based on the browser fingerpint.  &#39;off&#39;: Don&#39;t spoof fonts, use the real fonts of your machine. (required).</param>
        /// <param name="screen">Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be provided (required).</param>
        /// <param name="hardwareConcurrency">Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a  HardwareConcurrencyType must be provided (valid values:1, 2, 4, 8, 12, 16) (required).</param>
        /// <param name="deviceMemory">Sets the level of device memory spoofing. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.  When value is set to manual, a specific amount of device memory must be provided (valid values: 0.25, 0.5, 1, 2, 4, 8) (required).</param>
        /// <param name="language">Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code. (required).</param>
        /// <param name="startPage">This website will be opened in the browser when the profile launches. (required).</param>
        /// <param name="passwordManager">Defines whether the browser can save login credentials. Possible values are:  &#39;enabled&#39;: Credential saving is allowed.  &#39;disabled&#39;: Credential saving is blocked. (required).</param>
        /// <param name="extensions">A list of extensions or addons that will be loaded to the profile when the profile is started. For chrome and edge use CRX3 format  extensions. For firefox use signed xpi format addons. (required).</param>
        /// <param name="notes">A free text including any notes written by the user. (required).</param>
        /// <param name="status">Status information about the profile. (required).</param>
        /// <param name="storage">Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated..</param>
        /// <param name="folderId">A unique identifier of the containing folder or empty (00000000-0000-0000-0000-000000000000) if it is not in folder..</param>
        public ProfileResponse(Guid id = default, string name = default, List<string> tags = default, DateTime createdAt = default, Fingerprint fingerprint = default, CanvasSpoofingType canvas = default, WebglSpoofingType webgl = default, WebglMetaChoice webglMeta = default, AudioSpoofingType audio = default, TimezoneChoice timezone = default, GeolocationChoice geolocation = default, ProxyChoice proxy = default, WebRtcChoice webRtc = default, FontSpoofingType fonts = default, ScreenChoice screen = default, HardwareConcurrencyChoice hardwareConcurrency = default, DeviceMemoryChoice deviceMemory = default, string language = default, string startPage = default, PasswordManagerType passwordManager = default, List<string> extensions = default, string notes = default, StatusResponse status = default, ProfileStorageLocation? storage = default, Guid? folderId = default)
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProfileResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for ProfileResponse and cannot be null");
            }
            this.Tags = tags;
            this.CreatedAt = createdAt;
            // to ensure "fingerprint" is required (not null)
            if (fingerprint == null)
            {
                throw new ArgumentNullException("fingerprint is a required property for ProfileResponse and cannot be null");
            }
            this.Fingerprint = fingerprint;
            this.Canvas = canvas;
            this.Webgl = webgl;
            // to ensure "webglMeta" is required (not null)
            if (webglMeta == null)
            {
                throw new ArgumentNullException("webglMeta is a required property for ProfileResponse and cannot be null");
            }
            this.WebglMeta = webglMeta;
            this.Audio = audio;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new ArgumentNullException("timezone is a required property for ProfileResponse and cannot be null");
            }
            this.Timezone = timezone;
            // to ensure "geolocation" is required (not null)
            if (geolocation == null)
            {
                throw new ArgumentNullException("geolocation is a required property for ProfileResponse and cannot be null");
            }
            this.Geolocation = geolocation;
            // to ensure "proxy" is required (not null)
            if (proxy == null)
            {
                throw new ArgumentNullException("proxy is a required property for ProfileResponse and cannot be null");
            }
            this.Proxy = proxy;
            // to ensure "webRtc" is required (not null)
            if (webRtc == null)
            {
                throw new ArgumentNullException("webRtc is a required property for ProfileResponse and cannot be null");
            }
            this.WebRtc = webRtc;
            this.Fonts = fonts;
            // to ensure "screen" is required (not null)
            if (screen == null)
            {
                throw new ArgumentNullException("screen is a required property for ProfileResponse and cannot be null");
            }
            this.Screen = screen;
            // to ensure "hardwareConcurrency" is required (not null)
            if (hardwareConcurrency == null)
            {
                throw new ArgumentNullException("hardwareConcurrency is a required property for ProfileResponse and cannot be null");
            }
            this.HardwareConcurrency = hardwareConcurrency;
            // to ensure "deviceMemory" is required (not null)
            if (deviceMemory == null)
            {
                throw new ArgumentNullException("deviceMemory is a required property for ProfileResponse and cannot be null");
            }
            this.DeviceMemory = deviceMemory;
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for ProfileResponse and cannot be null");
            }
            this.Language = language;
            // to ensure "startPage" is required (not null)
            if (startPage == null)
            {
                throw new ArgumentNullException("startPage is a required property for ProfileResponse and cannot be null");
            }
            this.StartPage = startPage;
            this.PasswordManager = passwordManager;
            // to ensure "extensions" is required (not null)
            if (extensions == null)
            {
                throw new ArgumentNullException("extensions is a required property for ProfileResponse and cannot be null");
            }
            this.Extensions = extensions;
            // to ensure "notes" is required (not null)
            if (notes == null)
            {
                throw new ArgumentNullException("notes is a required property for ProfileResponse and cannot be null");
            }
            this.Notes = notes;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ProfileResponse and cannot be null");
            }
            this.Status = status;
            this.Storage = storage;
            this.FolderId = folderId;
        }

        /// <summary>
        /// A unique identifier of the profile
        /// </summary>
        /// <value>A unique identifier of the profile</value>
        /*
        <example>a7cafbbe-6bc0-4575-8c6e-f1adf391f180</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.
        /// </summary>
        /// <value>Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.</value>
        /*
        <example>mystic-turtle</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Profile tags
        /// </summary>
        /// <value>Profile tags</value>
        /*
        <example>[&quot;facebook&quot;,&quot;instagram&quot;]</example>
        */
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Date when the profile was created.
        /// </summary>
        /// <value>Date when the profile was created.</value>
        /*
        <example>2020-05-02T03:10:32.245270100+10:00</example>
        */
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Provides a full view of a fingerprint, which encapsulates real-world browser fingerprint configurations used to  instantiate virtual browser profiles.
        /// </summary>
        /// <value>Provides a full view of a fingerprint, which encapsulates real-world browser fingerprint configurations used to  instantiate virtual browser profiles.</value>
        [DataMember(Name = "fingerprint", IsRequired = true, EmitDefaultValue = true)]
        public Fingerprint Fingerprint { get; set; }

        /// <summary>
        /// Sets how the WebGL Vendor and Renderer will be spoofed. Possible values:  &#39;automatic&#39;: The vendor and renderer values comes from the fingerprint.  &#39;manual&#39;: Manually set the vendor and renderer values.  &#39;off&#39;: Turn off the spoofing, use the original settings
        /// </summary>
        /// <value>Sets how the WebGL Vendor and Renderer will be spoofed. Possible values:  &#39;automatic&#39;: The vendor and renderer values comes from the fingerprint.  &#39;manual&#39;: Manually set the vendor and renderer values.  &#39;off&#39;: Turn off the spoofing, use the original settings</value>
        [DataMember(Name = "webglMeta", IsRequired = true, EmitDefaultValue = true)]
        public WebglMetaChoice WebglMeta { get; set; }

        /// <summary>
        /// Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public TimezoneChoice Timezone { get; set; }

        /// <summary>
        /// Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "geolocation", IsRequired = true, EmitDefaultValue = true)]
        public GeolocationChoice Geolocation { get; set; }

        /// <summary>
        /// Proxy connection settings of the profiles. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server is provided.
        /// </summary>
        /// <value>Proxy connection settings of the profiles. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server is provided.</value>
        [DataMember(Name = "proxy", IsRequired = true, EmitDefaultValue = true)]
        public ProxyChoice Proxy { get; set; }

        /// <summary>
        /// Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "webRtc", IsRequired = true, EmitDefaultValue = true)]
        public WebRtcChoice WebRtc { get; set; }

        /// <summary>
        /// Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be provided
        /// </summary>
        /// <value>Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be provided</value>
        [DataMember(Name = "screen", IsRequired = true, EmitDefaultValue = true)]
        public ScreenChoice Screen { get; set; }

        /// <summary>
        /// Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a  HardwareConcurrencyType must be provided (valid values:1, 2, 4, 8, 12, 16)
        /// </summary>
        /// <value>Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a  HardwareConcurrencyType must be provided (valid values:1, 2, 4, 8, 12, 16)</value>
        [DataMember(Name = "hardwareConcurrency", IsRequired = true, EmitDefaultValue = true)]
        public HardwareConcurrencyChoice HardwareConcurrency { get; set; }

        /// <summary>
        /// Sets the level of device memory spoofing. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.  When value is set to manual, a specific amount of device memory must be provided (valid values: 0.25, 0.5, 1, 2, 4, 8)
        /// </summary>
        /// <value>Sets the level of device memory spoofing. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.  When value is set to manual, a specific amount of device memory must be provided (valid values: 0.25, 0.5, 1, 2, 4, 8)</value>
        [DataMember(Name = "deviceMemory", IsRequired = true, EmitDefaultValue = true)]
        public DeviceMemoryChoice DeviceMemory { get; set; }

        /// <summary>
        /// Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
        /// </summary>
        /// <value>Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.</value>
        /*
        <example>en-us</example>
        */
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// This website will be opened in the browser when the profile launches.
        /// </summary>
        /// <value>This website will be opened in the browser when the profile launches.</value>
        /*
        <example>https://whoer.net/</example>
        */
        [DataMember(Name = "startPage", IsRequired = true, EmitDefaultValue = true)]
        public string StartPage { get; set; }

        /// <summary>
        /// A list of extensions or addons that will be loaded to the profile when the profile is started. For chrome and edge use CRX3 format  extensions. For firefox use signed xpi format addons.
        /// </summary>
        /// <value>A list of extensions or addons that will be loaded to the profile when the profile is started. For chrome and edge use CRX3 format  extensions. For firefox use signed xpi format addons.</value>
        [DataMember(Name = "extensions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Extensions { get; set; }

        /// <summary>
        /// A free text including any notes written by the user.
        /// </summary>
        /// <value>A free text including any notes written by the user.</value>
        /*
        <example>I used this profile for ad verification.</example>
        */
        [DataMember(Name = "notes", IsRequired = true, EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Status information about the profile.
        /// </summary>
        /// <value>Status information about the profile.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusResponse Status { get; set; }

        /// <summary>
        /// A unique identifier of the containing folder or empty (00000000-0000-0000-0000-000000000000) if it is not in folder.
        /// </summary>
        /// <value>A unique identifier of the containing folder or empty (00000000-0000-0000-0000-000000000000) if it is not in folder.</value>
        /*
        <example>c7aafbbe-b6c0-5475-c66e-1fadf39180f1</example>
        */
        [DataMember(Name = "folderId", EmitDefaultValue = true)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Canvas: ").Append(Canvas).Append("\n");
            sb.Append("  Webgl: ").Append(Webgl).Append("\n");
            sb.Append("  WebglMeta: ").Append(WebglMeta).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  WebRtc: ").Append(WebRtc).Append("\n");
            sb.Append("  Fonts: ").Append(Fonts).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  HardwareConcurrency: ").Append(HardwareConcurrency).Append("\n");
            sb.Append("  DeviceMemory: ").Append(DeviceMemory).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  PasswordManager: ").Append(PasswordManager).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
