/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// ProfileResponse
    /// </summary>
    [DataContract(Name = "ProfileResponse")]
    public partial class ProfileResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Canvas
        /// </summary>
        [DataMember(Name = "canvas", IsRequired = true, EmitDefaultValue = true)]
        public CanvasSpoofingType Canvas { get; set; }

        /// <summary>
        /// Gets or Sets Webgl
        /// </summary>
        [DataMember(Name = "webgl", IsRequired = true, EmitDefaultValue = true)]
        public WebglSpoofingType Webgl { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name = "audio", IsRequired = true, EmitDefaultValue = true)]
        public AudioSpoofingType Audio { get; set; }

        /// <summary>
        /// Gets or Sets Fonts
        /// </summary>
        [DataMember(Name = "fonts", IsRequired = true, EmitDefaultValue = true)]
        public FontSpoofingType Fonts { get; set; }

        /// <summary>
        /// Gets or Sets PasswordManager
        /// </summary>
        [DataMember(Name = "passwordManager", IsRequired = true, EmitDefaultValue = true)]
        public PasswordManagerType PasswordManager { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public ProfileStorageLocation? Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileResponse" /> class.
        /// </summary>
        /// <param name="id">A unique identifier of the profile (required).</param>
        /// <param name="name">Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator. (required).</param>
        /// <param name="tags">Profile tags (required).</param>
        /// <param name="createdAt">Date when the profile was created. (required).</param>
        /// <param name="fingerprint">fingerprint (required).</param>
        /// <param name="canvas">canvas (required).</param>
        /// <param name="webgl">webgl (required).</param>
        /// <param name="webglMeta">webglMeta (required).</param>
        /// <param name="audio">audio (required).</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="geolocation">geolocation (required).</param>
        /// <param name="proxy">proxy (required).</param>
        /// <param name="webRtc">webRtc (required).</param>
        /// <param name="fonts">fonts (required).</param>
        /// <param name="screen">screen (required).</param>
        /// <param name="hardwareConcurrency">hardwareConcurrency (required).</param>
        /// <param name="deviceMemory">deviceMemory (required).</param>
        /// <param name="language">Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code. (required).</param>
        /// <param name="startPage">This website will be opened in the browser when the profile launches. (required).</param>
        /// <param name="passwordManager">passwordManager (required).</param>
        /// <param name="extensions">A list of extensions or addons that will be loaded to the profile when the profile is started. For chrome and edge use CRX3 format  extensions. For firefox use signed xpi format addons. (required).</param>
        /// <param name="notes">A free text including any notes written by the user. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="storage">storage.</param>
        /// <param name="folderId">A unique identifier of the containing folder or null if it is not in folder..</param>
        public ProfileResponse(Guid id = default(Guid), string name = default(string), List<string> tags = default(List<string>), DateTime createdAt = default(DateTime), Fingerprint fingerprint = default(Fingerprint), CanvasSpoofingType canvas = default(CanvasSpoofingType), WebglSpoofingType webgl = default(WebglSpoofingType), WebglMetaChoice webglMeta = default(WebglMetaChoice), AudioSpoofingType audio = default(AudioSpoofingType), TimezoneChoice timezone = default(TimezoneChoice), GeolocationChoice geolocation = default(GeolocationChoice), ProxyChoice proxy = default(ProxyChoice), WebRtcChoice webRtc = default(WebRtcChoice), FontSpoofingType fonts = default(FontSpoofingType), ScreenChoice screen = default(ScreenChoice), HardwareConcurrencyChoice hardwareConcurrency = default(HardwareConcurrencyChoice), DeviceMemoryChoice deviceMemory = default(DeviceMemoryChoice), string language = default(string), string startPage = default(string), PasswordManagerType passwordManager = default(PasswordManagerType), List<string> extensions = default(List<string>), string notes = default(string), StatusResponse status = default(StatusResponse), ProfileStorageLocation? storage = default(ProfileStorageLocation?), Guid? folderId = default(Guid?))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProfileResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for ProfileResponse and cannot be null");
            }
            this.Tags = tags;
            this.CreatedAt = createdAt;
            // to ensure "fingerprint" is required (not null)
            if (fingerprint == null)
            {
                throw new ArgumentNullException("fingerprint is a required property for ProfileResponse and cannot be null");
            }
            this.Fingerprint = fingerprint;
            this.Canvas = canvas;
            this.Webgl = webgl;
            // to ensure "webglMeta" is required (not null)
            if (webglMeta == null)
            {
                throw new ArgumentNullException("webglMeta is a required property for ProfileResponse and cannot be null");
            }
            this.WebglMeta = webglMeta;
            this.Audio = audio;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new ArgumentNullException("timezone is a required property for ProfileResponse and cannot be null");
            }
            this.Timezone = timezone;
            // to ensure "geolocation" is required (not null)
            if (geolocation == null)
            {
                throw new ArgumentNullException("geolocation is a required property for ProfileResponse and cannot be null");
            }
            this.Geolocation = geolocation;
            // to ensure "proxy" is required (not null)
            if (proxy == null)
            {
                throw new ArgumentNullException("proxy is a required property for ProfileResponse and cannot be null");
            }
            this.Proxy = proxy;
            // to ensure "webRtc" is required (not null)
            if (webRtc == null)
            {
                throw new ArgumentNullException("webRtc is a required property for ProfileResponse and cannot be null");
            }
            this.WebRtc = webRtc;
            this.Fonts = fonts;
            // to ensure "screen" is required (not null)
            if (screen == null)
            {
                throw new ArgumentNullException("screen is a required property for ProfileResponse and cannot be null");
            }
            this.Screen = screen;
            // to ensure "hardwareConcurrency" is required (not null)
            if (hardwareConcurrency == null)
            {
                throw new ArgumentNullException("hardwareConcurrency is a required property for ProfileResponse and cannot be null");
            }
            this.HardwareConcurrency = hardwareConcurrency;
            // to ensure "deviceMemory" is required (not null)
            if (deviceMemory == null)
            {
                throw new ArgumentNullException("deviceMemory is a required property for ProfileResponse and cannot be null");
            }
            this.DeviceMemory = deviceMemory;
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for ProfileResponse and cannot be null");
            }
            this.Language = language;
            // to ensure "startPage" is required (not null)
            if (startPage == null)
            {
                throw new ArgumentNullException("startPage is a required property for ProfileResponse and cannot be null");
            }
            this.StartPage = startPage;
            this.PasswordManager = passwordManager;
            // to ensure "extensions" is required (not null)
            if (extensions == null)
            {
                throw new ArgumentNullException("extensions is a required property for ProfileResponse and cannot be null");
            }
            this.Extensions = extensions;
            // to ensure "notes" is required (not null)
            if (notes == null)
            {
                throw new ArgumentNullException("notes is a required property for ProfileResponse and cannot be null");
            }
            this.Notes = notes;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ProfileResponse and cannot be null");
            }
            this.Status = status;
            this.Storage = storage;
            this.FolderId = folderId;
        }

        /// <summary>
        /// A unique identifier of the profile
        /// </summary>
        /// <value>A unique identifier of the profile</value>
        /*
        <example>a7cafbbe-6bc0-4575-8c6e-f1adf391f180</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.
        /// </summary>
        /// <value>Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.</value>
        /*
        <example>mystic-turtle</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Profile tags
        /// </summary>
        /// <value>Profile tags</value>
        /*
        <example>[&quot;facebook&quot;,&quot;instagram&quot;]</example>
        */
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Date when the profile was created.
        /// </summary>
        /// <value>Date when the profile was created.</value>
        /*
        <example>2020-05-02T03:10:32.245270100+10:00</example>
        */
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Fingerprint
        /// </summary>
        [DataMember(Name = "fingerprint", IsRequired = true, EmitDefaultValue = true)]
        public Fingerprint Fingerprint { get; set; }

        /// <summary>
        /// Gets or Sets WebglMeta
        /// </summary>
        [DataMember(Name = "webglMeta", IsRequired = true, EmitDefaultValue = true)]
        public WebglMetaChoice WebglMeta { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public TimezoneChoice Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [DataMember(Name = "geolocation", IsRequired = true, EmitDefaultValue = true)]
        public GeolocationChoice Geolocation { get; set; }

        /// <summary>
        /// Gets or Sets Proxy
        /// </summary>
        [DataMember(Name = "proxy", IsRequired = true, EmitDefaultValue = true)]
        public ProxyChoice Proxy { get; set; }

        /// <summary>
        /// Gets or Sets WebRtc
        /// </summary>
        [DataMember(Name = "webRtc", IsRequired = true, EmitDefaultValue = true)]
        public WebRtcChoice WebRtc { get; set; }

        /// <summary>
        /// Gets or Sets Screen
        /// </summary>
        [DataMember(Name = "screen", IsRequired = true, EmitDefaultValue = true)]
        public ScreenChoice Screen { get; set; }

        /// <summary>
        /// Gets or Sets HardwareConcurrency
        /// </summary>
        [DataMember(Name = "hardwareConcurrency", IsRequired = true, EmitDefaultValue = true)]
        public HardwareConcurrencyChoice HardwareConcurrency { get; set; }

        /// <summary>
        /// Gets or Sets DeviceMemory
        /// </summary>
        [DataMember(Name = "deviceMemory", IsRequired = true, EmitDefaultValue = true)]
        public DeviceMemoryChoice DeviceMemory { get; set; }

        /// <summary>
        /// Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
        /// </summary>
        /// <value>Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.</value>
        /*
        <example>en-us</example>
        */
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// This website will be opened in the browser when the profile launches.
        /// </summary>
        /// <value>This website will be opened in the browser when the profile launches.</value>
        /*
        <example>https://whoer.net/</example>
        */
        [DataMember(Name = "startPage", IsRequired = true, EmitDefaultValue = true)]
        public string StartPage { get; set; }

        /// <summary>
        /// A list of extensions or addons that will be loaded to the profile when the profile is started. For chrome and edge use CRX3 format  extensions. For firefox use signed xpi format addons.
        /// </summary>
        /// <value>A list of extensions or addons that will be loaded to the profile when the profile is started. For chrome and edge use CRX3 format  extensions. For firefox use signed xpi format addons.</value>
        [DataMember(Name = "extensions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Extensions { get; set; }

        /// <summary>
        /// A free text including any notes written by the user.
        /// </summary>
        /// <value>A free text including any notes written by the user.</value>
        /*
        <example>I used this profile for ad verification.</example>
        */
        [DataMember(Name = "notes", IsRequired = true, EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusResponse Status { get; set; }

        /// <summary>
        /// A unique identifier of the containing folder or null if it is not in folder.
        /// </summary>
        /// <value>A unique identifier of the containing folder or null if it is not in folder.</value>
        /*
        <example>c7aafbbe-b6c0-5475-c66e-1fadf39180f1</example>
        */
        [DataMember(Name = "folderId", EmitDefaultValue = true)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Canvas: ").Append(Canvas).Append("\n");
            sb.Append("  Webgl: ").Append(Webgl).Append("\n");
            sb.Append("  WebglMeta: ").Append(WebglMeta).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  WebRtc: ").Append(WebRtc).Append("\n");
            sb.Append("  Fonts: ").Append(Fonts).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  HardwareConcurrency: ").Append(HardwareConcurrency).Append("\n");
            sb.Append("  DeviceMemory: ").Append(DeviceMemory).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  PasswordManager: ").Append(PasswordManager).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
