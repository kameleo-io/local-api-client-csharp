/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// Provides a full view of a fingerprint, which encapsulates real-world browser fingerprint configurations used to  instantiate virtual browser profiles.
    /// </summary>
    [DataContract(Name = "Fingerprint")]
    public partial class Fingerprint : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fingerprint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fingerprint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fingerprint" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the fingerprint. As time passes new fingerprint versions will be introduced. It is recommended to use the latest one. (required).</param>
        /// <param name="id">The unique identifier of the fingerprint. You can use this as a reference to create a new profile from this fingerprint. (required).</param>
        /// <param name="device">device (required).</param>
        /// <param name="os">os (required).</param>
        /// <param name="browser">browser (required).</param>
        /// <param name="webglMeta">webglMeta (required).</param>
        /// <param name="resolution">The screen size of the device in pixels (required).</param>
        /// <param name="fonts">A list of font types included in the profile (required).</param>
        public Fingerprint(string varVersion = default(string), string id = default(string), Device device = default(Device), Os os = default(Os), Browser browser = default(Browser), WebglMeta webglMeta = default(WebglMeta), string resolution = default(string), List<string> fonts = default(List<string>))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Fingerprint and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Fingerprint and cannot be null");
            }
            this.Id = id;
            // to ensure "device" is required (not null)
            if (device == null)
            {
                throw new ArgumentNullException("device is a required property for Fingerprint and cannot be null");
            }
            this.Device = device;
            // to ensure "os" is required (not null)
            if (os == null)
            {
                throw new ArgumentNullException("os is a required property for Fingerprint and cannot be null");
            }
            this.Os = os;
            // to ensure "browser" is required (not null)
            if (browser == null)
            {
                throw new ArgumentNullException("browser is a required property for Fingerprint and cannot be null");
            }
            this.Browser = browser;
            // to ensure "webglMeta" is required (not null)
            if (webglMeta == null)
            {
                throw new ArgumentNullException("webglMeta is a required property for Fingerprint and cannot be null");
            }
            this.WebglMeta = webglMeta;
            // to ensure "resolution" is required (not null)
            if (resolution == null)
            {
                throw new ArgumentNullException("resolution is a required property for Fingerprint and cannot be null");
            }
            this.Resolution = resolution;
            // to ensure "fonts" is required (not null)
            if (fonts == null)
            {
                throw new ArgumentNullException("fonts is a required property for Fingerprint and cannot be null");
            }
            this.Fonts = fonts;
        }

        /// <summary>
        /// The version of the fingerprint. As time passes new fingerprint versions will be introduced. It is recommended to use the latest one.
        /// </summary>
        /// <value>The version of the fingerprint. As time passes new fingerprint versions will be introduced. It is recommended to use the latest one.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The unique identifier of the fingerprint. You can use this as a reference to create a new profile from this fingerprint.
        /// </summary>
        /// <value>The unique identifier of the fingerprint. You can use this as a reference to create a new profile from this fingerprint.</value>
        /*
        <example>555b894595b5cd242ead1533218a5ee93dd7c7ebfbff4dccb80fdb112f6cda27</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", IsRequired = true, EmitDefaultValue = true)]
        public Device Device { get; set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name = "os", IsRequired = true, EmitDefaultValue = true)]
        public Os Os { get; set; }

        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [DataMember(Name = "browser", IsRequired = true, EmitDefaultValue = true)]
        public Browser Browser { get; set; }

        /// <summary>
        /// Gets or Sets WebglMeta
        /// </summary>
        [DataMember(Name = "webglMeta", IsRequired = true, EmitDefaultValue = true)]
        public WebglMeta WebglMeta { get; set; }

        /// <summary>
        /// The screen size of the device in pixels
        /// </summary>
        /// <value>The screen size of the device in pixels</value>
        /*
        <example>1920x1080</example>
        */
        [DataMember(Name = "resolution", IsRequired = true, EmitDefaultValue = true)]
        public string Resolution { get; set; }

        /// <summary>
        /// A list of font types included in the profile
        /// </summary>
        /// <value>A list of font types included in the profile</value>
        /*
        <example>[&quot;Arial&quot;,&quot;Tahoma&quot;]</example>
        */
        [DataMember(Name = "fonts", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Fonts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fingerprint {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  WebglMeta: ").Append(WebglMeta).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Fonts: ").Append(Fonts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
