/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// Extra settings and preferences that can be applied to the browser at startup.
    /// </summary>
    [DataContract(Name = "BrowserSettings")]
    public partial class BrowserSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserSettings" /> class.
        /// </summary>
        /// <param name="arguments">Command line arguments that can be passed to the browser at startup. This applies to both Chroma and Junglefox browsers. Do not include the  starting double dash (- -)..</param>
        /// <param name="preferences">List of preferences for browsers that can be passed at startup. In case of Chromium based options it will be a user profile preference. In  case of Firefox profiles it will be a preference..</param>
        /// <param name="additionalOptions">Special options available only in Kameleo, such as device scale factor for mobile emulated profiles. See the docs for more details..</param>
        public BrowserSettings(List<string> arguments = default, List<Preference> preferences = default, List<Preference> additionalOptions = default)
        {
            this.Arguments = arguments;
            this.Preferences = preferences;
            this.AdditionalOptions = additionalOptions;
        }

        /// <summary>
        /// Command line arguments that can be passed to the browser at startup. This applies to both Chroma and Junglefox browsers. Do not include the  starting double dash (- -).
        /// </summary>
        /// <value>Command line arguments that can be passed to the browser at startup. This applies to both Chroma and Junglefox browsers. Do not include the  starting double dash (- -).</value>
        [DataMember(Name = "arguments", EmitDefaultValue = true)]
        public List<string> Arguments { get; set; }

        /// <summary>
        /// List of preferences for browsers that can be passed at startup. In case of Chromium based options it will be a user profile preference. In  case of Firefox profiles it will be a preference.
        /// </summary>
        /// <value>List of preferences for browsers that can be passed at startup. In case of Chromium based options it will be a user profile preference. In  case of Firefox profiles it will be a preference.</value>
        [DataMember(Name = "preferences", EmitDefaultValue = true)]
        public List<Preference> Preferences { get; set; }

        /// <summary>
        /// Special options available only in Kameleo, such as device scale factor for mobile emulated profiles. See the docs for more details.
        /// </summary>
        /// <value>Special options available only in Kameleo, such as device scale factor for mobile emulated profiles. See the docs for more details.</value>
        [DataMember(Name = "additionalOptions", EmitDefaultValue = true)]
        public List<Preference> AdditionalOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrowserSettings {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  AdditionalOptions: ").Append(AdditionalOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
