/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// CreateProfileRequest
    /// </summary>
    [DataContract(Name = "CreateProfileRequest")]
    public partial class CreateProfileRequest : IValidatableObject
    {

        /// <summary>
        /// Specifies how the canvas will be spoofed. Possible values:  &#39;intelligent&#39;: Use intelligent canvas spoofing. This will result non-unique canvas fingerprints.  &#39;noise&#39;: Add some noise to canvas generation.  &#39;block&#39;: Completely block the 2D API.  &#39;off&#39;: Turn off the spoofing, use the original settings.
        /// </summary>
        /// <value>Specifies how the canvas will be spoofed. Possible values:  &#39;intelligent&#39;: Use intelligent canvas spoofing. This will result non-unique canvas fingerprints.  &#39;noise&#39;: Add some noise to canvas generation.  &#39;block&#39;: Completely block the 2D API.  &#39;off&#39;: Turn off the spoofing, use the original settings.</value>
        [DataMember(Name = "canvas", EmitDefaultValue = false)]
        public CanvasSpoofingType? Canvas { get; set; }

        /// <summary>
        /// Specifies how the WebGL will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the WebGL generation  &#39;block&#39;: Completely block the 3D API  &#39;off&#39;: Turn off the spoofing, use the original settings
        /// </summary>
        /// <value>Specifies how the WebGL will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the WebGL generation  &#39;block&#39;: Completely block the 3D API  &#39;off&#39;: Turn off the spoofing, use the original settings</value>
        [DataMember(Name = "webgl", EmitDefaultValue = false)]
        public WebglSpoofingType? Webgl { get; set; }

        /// <summary>
        /// Specifies how the audio will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the Audio generation  &#39;block&#39;: Completely block the Audio API  &#39;off&#39;: Turn off the spoofing, use the original settings
        /// </summary>
        /// <value>Specifies how the audio will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the Audio generation  &#39;block&#39;: Completely block the Audio API  &#39;off&#39;: Turn off the spoofing, use the original settings</value>
        [DataMember(Name = "audio", EmitDefaultValue = false)]
        public AudioSpoofingType? Audio { get; set; }

        /// <summary>
        /// Specifies how the fonts will be spoofed. Possible values:  &#39;automatic&#39;: Spoof fonts based on the browser fingerpint.  &#39;off&#39;: Don&#39;t spoof fonts, use the real fonts of your machine.
        /// </summary>
        /// <value>Specifies how the fonts will be spoofed. Possible values:  &#39;automatic&#39;: Spoof fonts based on the browser fingerpint.  &#39;off&#39;: Don&#39;t spoof fonts, use the real fonts of your machine.</value>
        [DataMember(Name = "fonts", EmitDefaultValue = false)]
        public FontSpoofingType? Fonts { get; set; }

        /// <summary>
        /// Defines whether the browser can save login credentials. Possible values are:  &#39;enabled&#39;: Credential saving is allowed.  &#39;disabled&#39;: Credential saving is blocked.
        /// </summary>
        /// <value>Defines whether the browser can save login credentials. Possible values are:  &#39;enabled&#39;: Credential saving is allowed.  &#39;disabled&#39;: Credential saving is blocked.</value>
        [DataMember(Name = "passwordManager", EmitDefaultValue = false)]
        public PasswordManagerType? PasswordManager { get; set; }

        /// <summary>
        /// Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated.
        /// </summary>
        /// <value>Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated.</value>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public ProfileStorageLocation? Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProfileRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateProfileRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProfileRequest" /> class.
        /// </summary>
        /// <param name="fingerprintId">The unique identifier of the fingerprint. This references the fingerprint which should be used to build the new profile. (required).</param>
        /// <param name="name">Sets a human-readable name for the profile, which is modifiable at any time..</param>
        /// <param name="folderId">Id of the folder the profile should be created in. If null or empty (00000000-0000-0000-0000-000000000000) the profile will be created in root..</param>
        /// <param name="tags">Use tags to categorize profiles by labeling them accordingly..</param>
        /// <param name="canvas">Specifies how the canvas will be spoofed. Possible values:  &#39;intelligent&#39;: Use intelligent canvas spoofing. This will result non-unique canvas fingerprints.  &#39;noise&#39;: Add some noise to canvas generation.  &#39;block&#39;: Completely block the 2D API.  &#39;off&#39;: Turn off the spoofing, use the original settings..</param>
        /// <param name="webgl">Specifies how the WebGL will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the WebGL generation  &#39;block&#39;: Completely block the 3D API  &#39;off&#39;: Turn off the spoofing, use the original settings.</param>
        /// <param name="webglMeta">Sets how the WebGL Vendor and Renderer will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;..</param>
        /// <param name="audio">Specifies how the audio will be spoofed. Possible values:  &#39;noise&#39;: Add some noise to the Audio generation  &#39;block&#39;: Completely block the Audio API  &#39;off&#39;: Turn off the spoofing, use the original settings.</param>
        /// <param name="timezone">Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;..</param>
        /// <param name="geolocation">Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="proxy">Sets the Proxy connection settings of the profile. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server must  be provided..</param>
        /// <param name="webRtc">Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="fonts">Specifies how the fonts will be spoofed. Possible values:  &#39;automatic&#39;: Spoof fonts based on the browser fingerpint.  &#39;off&#39;: Don&#39;t spoof fonts, use the real fonts of your machine..</param>
        /// <param name="screen">Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be  provided..</param>
        /// <param name="hardwareConcurrency">Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a numeric value  (1, 2, 4, 8, 12 or 16) must be provided..</param>
        /// <param name="deviceMemory">Sets how the Device Memory will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a numeric value (0.25,  0.5, 1, 2, 4, 8) must be provided..</param>
        /// <param name="language">Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code..</param>
        /// <param name="startPage">This website will be opened in the browser when the profile launches..</param>
        /// <param name="passwordManager">Defines whether the browser can save login credentials. Possible values are:  &#39;enabled&#39;: Credential saving is allowed.  &#39;disabled&#39;: Credential saving is blocked..</param>
        /// <param name="extensions">A list of abolute paths from where the profile should load extensions or addons when starting the browser. For chrome and edge use CRX3  format extensions. For firefox use signed xpi format addons..</param>
        /// <param name="notes">A free text including any notes written by the user..</param>
        /// <param name="storage">Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated..</param>
        public CreateProfileRequest(string fingerprintId = default, string name = default, Guid? folderId = default, List<string> tags = default, CanvasSpoofingType? canvas = default, WebglSpoofingType? webgl = default, WebglMetaChoice webglMeta = default, AudioSpoofingType? audio = default, TimezoneChoice timezone = default, GeolocationChoice geolocation = default, ProxyChoice proxy = default, WebRtcChoice webRtc = default, FontSpoofingType? fonts = default, ScreenChoice screen = default, HardwareConcurrencyChoice hardwareConcurrency = default, DeviceMemoryChoice deviceMemory = default, string language = default, string startPage = default, PasswordManagerType? passwordManager = default, List<string> extensions = default, string notes = default, ProfileStorageLocation? storage = default)
        {
            // to ensure "fingerprintId" is required (not null)
            if (fingerprintId == null)
            {
                throw new ArgumentNullException("fingerprintId is a required property for CreateProfileRequest and cannot be null");
            }
            this.FingerprintId = fingerprintId;
            this.Name = name;
            this.FolderId = folderId;
            this.Tags = tags;
            this.Canvas = canvas;
            this.Webgl = webgl;
            this.WebglMeta = webglMeta;
            this.Audio = audio;
            this.Timezone = timezone;
            this.Geolocation = geolocation;
            this.Proxy = proxy;
            this.WebRtc = webRtc;
            this.Fonts = fonts;
            this.Screen = screen;
            this.HardwareConcurrency = hardwareConcurrency;
            this.DeviceMemory = deviceMemory;
            this.Language = language;
            this.StartPage = startPage;
            this.PasswordManager = passwordManager;
            this.Extensions = extensions;
            this.Notes = notes;
            this.Storage = storage;
        }

        /// <summary>
        /// The unique identifier of the fingerprint. This references the fingerprint which should be used to build the new profile.
        /// </summary>
        /// <value>The unique identifier of the fingerprint. This references the fingerprint which should be used to build the new profile.</value>
        /*
        <example>555b894595b5cd242ead1533218a5ee93dd7c7ebfbff4dccb80fdb112f6cda27</example>
        */
        [DataMember(Name = "fingerprintId", IsRequired = true, EmitDefaultValue = true)]
        public string FingerprintId { get; set; }

        /// <summary>
        /// Sets a human-readable name for the profile, which is modifiable at any time.
        /// </summary>
        /// <value>Sets a human-readable name for the profile, which is modifiable at any time.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the folder the profile should be created in. If null or empty (00000000-0000-0000-0000-000000000000) the profile will be created in root.
        /// </summary>
        /// <value>Id of the folder the profile should be created in. If null or empty (00000000-0000-0000-0000-000000000000) the profile will be created in root.</value>
        /*
        <example>0036135c-6f62-429b-a9db-fd541aca96a7</example>
        */
        [DataMember(Name = "folderId", EmitDefaultValue = true)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Use tags to categorize profiles by labeling them accordingly.
        /// </summary>
        /// <value>Use tags to categorize profiles by labeling them accordingly.</value>
        /*
        <example>[&quot;facebook&quot;,&quot;instagram&quot;]</example>
        */
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Sets how the WebGL Vendor and Renderer will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the WebGL Vendor and Renderer will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "webglMeta", EmitDefaultValue = true)]
        public WebglMetaChoice WebglMeta { get; set; }

        /// <summary>
        /// Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public TimezoneChoice Timezone { get; set; }

        /// <summary>
        /// Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "geolocation", EmitDefaultValue = true)]
        public GeolocationChoice Geolocation { get; set; }

        /// <summary>
        /// Sets the Proxy connection settings of the profile. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server must  be provided.
        /// </summary>
        /// <value>Sets the Proxy connection settings of the profile. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server must  be provided.</value>
        [DataMember(Name = "proxy", EmitDefaultValue = true)]
        public ProxyChoice Proxy { get; set; }

        /// <summary>
        /// Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "webRtc", EmitDefaultValue = true)]
        public WebRtcChoice WebRtc { get; set; }

        /// <summary>
        /// Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be  provided.
        /// </summary>
        /// <value>Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be  provided.</value>
        [DataMember(Name = "screen", EmitDefaultValue = true)]
        public ScreenChoice Screen { get; set; }

        /// <summary>
        /// Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a numeric value  (1, 2, 4, 8, 12 or 16) must be provided.
        /// </summary>
        /// <value>Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a numeric value  (1, 2, 4, 8, 12 or 16) must be provided.</value>
        [DataMember(Name = "hardwareConcurrency", EmitDefaultValue = true)]
        public HardwareConcurrencyChoice HardwareConcurrency { get; set; }

        /// <summary>
        /// Sets how the Device Memory will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a numeric value (0.25,  0.5, 1, 2, 4, 8) must be provided.
        /// </summary>
        /// <value>Sets how the Device Memory will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a numeric value (0.25,  0.5, 1, 2, 4, 8) must be provided.</value>
        [DataMember(Name = "deviceMemory", EmitDefaultValue = true)]
        public DeviceMemoryChoice DeviceMemory { get; set; }

        /// <summary>
        /// Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
        /// </summary>
        /// <value>Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.</value>
        /*
        <example>en-us</example>
        */
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// This website will be opened in the browser when the profile launches.
        /// </summary>
        /// <value>This website will be opened in the browser when the profile launches.</value>
        /*
        <example>https://whoer.net/</example>
        */
        [DataMember(Name = "startPage", EmitDefaultValue = true)]
        public string StartPage { get; set; }

        /// <summary>
        /// A list of abolute paths from where the profile should load extensions or addons when starting the browser. For chrome and edge use CRX3  format extensions. For firefox use signed xpi format addons.
        /// </summary>
        /// <value>A list of abolute paths from where the profile should load extensions or addons when starting the browser. For chrome and edge use CRX3  format extensions. For firefox use signed xpi format addons.</value>
        [DataMember(Name = "extensions", EmitDefaultValue = true)]
        public List<string> Extensions { get; set; }

        /// <summary>
        /// A free text including any notes written by the user.
        /// </summary>
        /// <value>A free text including any notes written by the user.</value>
        /*
        <example>I used this profile for affiliate marketing.</example>
        */
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateProfileRequest {\n");
            sb.Append("  FingerprintId: ").Append(FingerprintId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Canvas: ").Append(Canvas).Append("\n");
            sb.Append("  Webgl: ").Append(Webgl).Append("\n");
            sb.Append("  WebglMeta: ").Append(WebglMeta).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  WebRtc: ").Append(WebRtc).Append("\n");
            sb.Append("  Fonts: ").Append(Fonts).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  HardwareConcurrency: ").Append(HardwareConcurrency).Append("\n");
            sb.Append("  DeviceMemory: ").Append(DeviceMemory).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  PasswordManager: ").Append(PasswordManager).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FingerprintId (string) minLength
            if (this.FingerprintId != null && this.FingerprintId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for FingerprintId, length must be greater than 1.", new[] { "FingerprintId" });
            }

            yield break;
        }
    }

}
