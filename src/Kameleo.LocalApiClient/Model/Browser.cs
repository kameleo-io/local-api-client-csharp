/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// Browser
    /// </summary>
    [DataContract(Name = "Browser")]
    public partial class Browser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Browser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Browser" /> class.
        /// </summary>
        /// <param name="product">Product of the browser. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;. (required).</param>
        /// <param name="major">Major version of the browser. (required).</param>
        /// <param name="varVersion">Exact version of the browser. (required).</param>
        public Browser(string product = default, int major = default, string varVersion = default)
        {
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new ArgumentNullException("product is a required property for Browser and cannot be null");
            }
            this.Product = product;
            this.Major = major;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Browser and cannot be null");
            }
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Product of the browser. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.
        /// </summary>
        /// <value>Product of the browser. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.</value>
        /*
        <example>chrome</example>
        */
        [DataMember(Name = "product", IsRequired = true, EmitDefaultValue = true)]
        public string Product { get; set; }

        /// <summary>
        /// Major version of the browser.
        /// </summary>
        /// <value>Major version of the browser.</value>
        /*
        <example>81</example>
        */
        [DataMember(Name = "major", IsRequired = true, EmitDefaultValue = true)]
        public int Major { get; set; }

        /// <summary>
        /// Exact version of the browser.
        /// </summary>
        /// <value>Exact version of the browser.</value>
        /*
        <example>81.0.4044</example>
        */
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Browser {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
