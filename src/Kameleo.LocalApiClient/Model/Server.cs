/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// Represents a server connection. It can be used as a proxy server connection as well.
    /// </summary>
    [DataContract(Name = "Server")]
    public partial class Server : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Server() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        /// <param name="host">Gets or sets the hostname where the service is provided from. (required).</param>
        /// <param name="port">Gets or sets the port where the service is provided from. (required).</param>
        /// <param name="id">Gets or sets the identity information provided for the service. This could be a custom id or username or anything which identifies a  resource on the remote service. Use it as a proxy username. This field is optional..</param>
        /// <param name="secret">Gets or sets the shared secret between the client and the service provider. Use it as a proxy password. This field is optional..</param>
        public Server(string host = default, int port = default, string id = default, string secret = default)
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new ArgumentNullException("host is a required property for Server and cannot be null");
            }
            this.Host = host;
            this.Port = port;
            this.Id = id;
            this.Secret = secret;
        }

        /// <summary>
        /// Gets or sets the hostname where the service is provided from.
        /// </summary>
        /// <value>Gets or sets the hostname where the service is provided from.</value>
        /*
        <example>127.0.0.1</example>
        */
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets the port where the service is provided from.
        /// </summary>
        /// <value>Gets or sets the port where the service is provided from.</value>
        /*
        <example>9951</example>
        */
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = true)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or sets the identity information provided for the service. This could be a custom id or username or anything which identifies a  resource on the remote service. Use it as a proxy username. This field is optional.
        /// </summary>
        /// <value>Gets or sets the identity information provided for the service. This could be a custom id or username or anything which identifies a  resource on the remote service. Use it as a proxy username. This field is optional.</value>
        /*
        <example>username</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the shared secret between the client and the service provider. Use it as a proxy password. This field is optional.
        /// </summary>
        /// <value>Gets or sets the shared secret between the client and the service provider. Use it as a proxy password. This field is optional.</value>
        /*
        <example>password</example>
        */
        [DataMember(Name = "secret", EmitDefaultValue = true)]
        public string Secret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Server {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
