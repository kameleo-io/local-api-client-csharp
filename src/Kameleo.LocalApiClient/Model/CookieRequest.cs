/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// CookieRequest
    /// </summary>
    [DataContract(Name = "CookieRequest")]
    public partial class CookieRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CookieRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CookieRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CookieRequest" /> class.
        /// </summary>
        /// <param name="domain">The domain attribute signifies the domain for which the cookie is valid and can be submitted with every request for this domain or its  subdomains. If this attribute is not specified, then the hostname of the originating server is used as the default value. (required).</param>
        /// <param name="name">The name for the Cookie. (required).</param>
        /// <param name="path">The path attribute indicates a URL path that must exist in the requested URL in order to send the Cookie header. The %x2F (\&quot;/\&quot;) character  is considered a directory separator, and subdirectories match as well. (required).</param>
        /// <param name="value">The value of the Cookie. (required).</param>
        /// <param name="hostOnly">Host Only cookie means that the cookie should be handled by the browser to the server only to the same host/server that firstly sent it to  the browser..</param>
        /// <param name="httpOnly">When this attribute is set, client-side scripts are not allowed to access the cookie..</param>
        /// <param name="secure">A cookie with the Secure attribute is sent to the server only with an encrypted request over the HTTPS protocol, never with unsecured HTTP,  and therefore can&#39;t easily be accessed by a man-in-the-middle attacker. Insecure sites (with http: in the URL) can&#39;t set cookies with the  Secure attribute..</param>
        /// <param name="sameSite">The sameSite attribute lets servers require that a cookie shouldn&#39;t be sent with cross-origin requests (where Site is defined by the  registrable domain), which provides some protection against cross-site request forgery attacks (CSRF).  It takes three possible values: Strict, Lax, and None.With Strict, the cookie is sent only to the same site as the one that originated it;  Lax is similar, with an exception for when the user navigates to a URL from an external site, such as by following a link; None has no  restrictions on cross-site requests..</param>
        /// <param name="expirationDate">This attribute is used to set persistent cookies. It signifies how long the browser should use the persistent cookie and when the cookie  should be deleted.  If this attribute is not specified, then the lifetime of the cookie is the same as that of browser session, i.e.it will be a non-persistent  cookie..</param>
        public CookieRequest(string domain = default, string name = default, string path = default, string value = default, bool hostOnly = default, bool httpOnly = default, bool secure = default, string sameSite = default, long? expirationDate = default)
        {
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for CookieRequest and cannot be null");
            }
            this.Domain = domain;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CookieRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for CookieRequest and cannot be null");
            }
            this.Path = path;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for CookieRequest and cannot be null");
            }
            this.Value = value;
            this.HostOnly = hostOnly;
            this.HttpOnly = httpOnly;
            this.Secure = secure;
            this.SameSite = sameSite;
            this.ExpirationDate = expirationDate;
        }

        /// <summary>
        /// The domain attribute signifies the domain for which the cookie is valid and can be submitted with every request for this domain or its  subdomains. If this attribute is not specified, then the hostname of the originating server is used as the default value.
        /// </summary>
        /// <value>The domain attribute signifies the domain for which the cookie is valid and can be submitted with every request for this domain or its  subdomains. If this attribute is not specified, then the hostname of the originating server is used as the default value.</value>
        /*
        <example>.google.com</example>
        */
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = true)]
        public string Domain { get; set; }

        /// <summary>
        /// The name for the Cookie.
        /// </summary>
        /// <value>The name for the Cookie.</value>
        /*
        <example>_ga</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The path attribute indicates a URL path that must exist in the requested URL in order to send the Cookie header. The %x2F (\&quot;/\&quot;) character  is considered a directory separator, and subdirectories match as well.
        /// </summary>
        /// <value>The path attribute indicates a URL path that must exist in the requested URL in order to send the Cookie header. The %x2F (\&quot;/\&quot;) character  is considered a directory separator, and subdirectories match as well.</value>
        /*
        <example>/gmail/about</example>
        */
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// The value of the Cookie.
        /// </summary>
        /// <value>The value of the Cookie.</value>
        /*
        <example>GA1.2-3.982544754.9825342343</example>
        */
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Host Only cookie means that the cookie should be handled by the browser to the server only to the same host/server that firstly sent it to  the browser.
        /// </summary>
        /// <value>Host Only cookie means that the cookie should be handled by the browser to the server only to the same host/server that firstly sent it to  the browser.</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "hostOnly", EmitDefaultValue = true)]
        public bool HostOnly { get; set; }

        /// <summary>
        /// When this attribute is set, client-side scripts are not allowed to access the cookie.
        /// </summary>
        /// <value>When this attribute is set, client-side scripts are not allowed to access the cookie.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "httpOnly", EmitDefaultValue = true)]
        public bool HttpOnly { get; set; }

        /// <summary>
        /// A cookie with the Secure attribute is sent to the server only with an encrypted request over the HTTPS protocol, never with unsecured HTTP,  and therefore can&#39;t easily be accessed by a man-in-the-middle attacker. Insecure sites (with http: in the URL) can&#39;t set cookies with the  Secure attribute.
        /// </summary>
        /// <value>A cookie with the Secure attribute is sent to the server only with an encrypted request over the HTTPS protocol, never with unsecured HTTP,  and therefore can&#39;t easily be accessed by a man-in-the-middle attacker. Insecure sites (with http: in the URL) can&#39;t set cookies with the  Secure attribute.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "secure", EmitDefaultValue = true)]
        public bool Secure { get; set; }

        /// <summary>
        /// The sameSite attribute lets servers require that a cookie shouldn&#39;t be sent with cross-origin requests (where Site is defined by the  registrable domain), which provides some protection against cross-site request forgery attacks (CSRF).  It takes three possible values: Strict, Lax, and None.With Strict, the cookie is sent only to the same site as the one that originated it;  Lax is similar, with an exception for when the user navigates to a URL from an external site, such as by following a link; None has no  restrictions on cross-site requests.
        /// </summary>
        /// <value>The sameSite attribute lets servers require that a cookie shouldn&#39;t be sent with cross-origin requests (where Site is defined by the  registrable domain), which provides some protection against cross-site request forgery attacks (CSRF).  It takes three possible values: Strict, Lax, and None.With Strict, the cookie is sent only to the same site as the one that originated it;  Lax is similar, with an exception for when the user navigates to a URL from an external site, such as by following a link; None has no  restrictions on cross-site requests.</value>
        /*
        <example>unspecified</example>
        */
        [DataMember(Name = "sameSite", EmitDefaultValue = true)]
        public string SameSite { get; set; }

        /// <summary>
        /// This attribute is used to set persistent cookies. It signifies how long the browser should use the persistent cookie and when the cookie  should be deleted.  If this attribute is not specified, then the lifetime of the cookie is the same as that of browser session, i.e.it will be a non-persistent  cookie.
        /// </summary>
        /// <value>This attribute is used to set persistent cookies. It signifies how long the browser should use the persistent cookie and when the cookie  should be deleted.  If this attribute is not specified, then the lifetime of the cookie is the same as that of browser session, i.e.it will be a non-persistent  cookie.</value>
        /*
        <example>1568986993</example>
        */
        [DataMember(Name = "expirationDate", EmitDefaultValue = true)]
        public long? ExpirationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CookieRequest {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  HostOnly: ").Append(HostOnly).Append("\n");
            sb.Append("  HttpOnly: ").Append(HttpOnly).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  SameSite: ").Append(SameSite).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Domain (string) minLength
            if (this.Domain != null && this.Domain.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Domain, length must be greater than 1.", new[] { "Domain" });
            }

            // Path (string) minLength
            if (this.Path != null && this.Path.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Path, length must be greater than 1.", new[] { "Path" });
            }

            yield break;
        }
    }

}
