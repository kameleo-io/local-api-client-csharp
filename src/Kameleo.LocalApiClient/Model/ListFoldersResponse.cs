/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// ListFoldersResponse
    /// </summary>
    [DataContract(Name = "ListFoldersResponse")]
    public partial class ListFoldersResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListFoldersResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListFoldersResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListFoldersResponse" /> class.
        /// </summary>
        /// <param name="folders">List of top-level folders, each folder may contain nested folders and cloud profiles. (required).</param>
        /// <param name="profiles">List of profiles not associated with any folder. This includes both cloud and local profiles. (required).</param>
        public ListFoldersResponse(List<FolderResponse> folders = default(List<FolderResponse>), List<ProfilePreview> profiles = default(List<ProfilePreview>))
        {
            // to ensure "folders" is required (not null)
            if (folders == null)
            {
                throw new ArgumentNullException("folders is a required property for ListFoldersResponse and cannot be null");
            }
            this.Folders = folders;
            // to ensure "profiles" is required (not null)
            if (profiles == null)
            {
                throw new ArgumentNullException("profiles is a required property for ListFoldersResponse and cannot be null");
            }
            this.Profiles = profiles;
        }

        /// <summary>
        /// List of top-level folders, each folder may contain nested folders and cloud profiles.
        /// </summary>
        /// <value>List of top-level folders, each folder may contain nested folders and cloud profiles.</value>
        [DataMember(Name = "folders", IsRequired = true, EmitDefaultValue = true)]
        public List<FolderResponse> Folders { get; set; }

        /// <summary>
        /// List of profiles not associated with any folder. This includes both cloud and local profiles.
        /// </summary>
        /// <value>List of profiles not associated with any folder. This includes both cloud and local profiles.</value>
        [DataMember(Name = "profiles", IsRequired = true, EmitDefaultValue = true)]
        public List<ProfilePreview> Profiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListFoldersResponse {\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
