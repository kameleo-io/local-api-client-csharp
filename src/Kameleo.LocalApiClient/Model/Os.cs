/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// Os
    /// </summary>
    [DataContract(Name = "Os")]
    public partial class Os : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Os" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Os() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Os" /> class.
        /// </summary>
        /// <param name="family">Specifies the operating system family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;. (required).</param>
        /// <param name="varVersion">The specific version of the OS. For example it helps you determine the exact version of the macOS. (required).</param>
        /// <param name="platform">The OS&#39;s platform, indicating the processor architecture (e.g., 64-bit, 32-bit) (required).</param>
        public Os(string family = default, string varVersion = default, string platform = default)
        {
            // to ensure "family" is required (not null)
            if (family == null)
            {
                throw new ArgumentNullException("family is a required property for Os and cannot be null");
            }
            this.Family = family;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Os and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new ArgumentNullException("platform is a required property for Os and cannot be null");
            }
            this.Platform = platform;
        }

        /// <summary>
        /// Specifies the operating system family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.
        /// </summary>
        /// <value>Specifies the operating system family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.</value>
        /*
        <example>windows</example>
        */
        [DataMember(Name = "family", IsRequired = true, EmitDefaultValue = true)]
        public string Family { get; set; }

        /// <summary>
        /// The specific version of the OS. For example it helps you determine the exact version of the macOS.
        /// </summary>
        /// <value>The specific version of the OS. For example it helps you determine the exact version of the macOS.</value>
        /*
        <example>10.15.4</example>
        */
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The OS&#39;s platform, indicating the processor architecture (e.g., 64-bit, 32-bit)
        /// </summary>
        /// <value>The OS&#39;s platform, indicating the processor architecture (e.g., 64-bit, 32-bit)</value>
        /*
        <example>64</example>
        */
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = true)]
        public string Platform { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Os {\n");
            sb.Append("  Family: ").Append(Family).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
