/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// ShareAccess
    /// </summary>
    [DataContract(Name = "ShareAccess")]
    public partial class ShareAccess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareAccess" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShareAccess() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShareAccess" /> class.
        /// </summary>
        /// <param name="user">user (required).</param>
        /// <param name="role">role (required).</param>
        /// <param name="sharedAt">Timestamp when the acess was granted to the user. (required).</param>
        public ShareAccess(User user = default(User), GroupRole role = default(GroupRole), DateTime sharedAt = default(DateTime))
        {
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for ShareAccess and cannot be null");
            }
            this.User = user;
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new ArgumentNullException("role is a required property for ShareAccess and cannot be null");
            }
            this.Role = role;
            this.SharedAt = sharedAt;
        }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public GroupRole Role { get; set; }

        /// <summary>
        /// Timestamp when the acess was granted to the user.
        /// </summary>
        /// <value>Timestamp when the acess was granted to the user.</value>
        [DataMember(Name = "sharedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime SharedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShareAccess {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  SharedAt: ").Append(SharedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
