/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// When the Geolocation spoofing is set to manual these extra settings will be used as well.
    /// </summary>
    [DataContract(Name = "GeolocationSpoofingOptions")]
    public partial class GeolocationSpoofingOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationSpoofingOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeolocationSpoofingOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationSpoofingOptions" /> class.
        /// </summary>
        /// <param name="latitude">From -90 to 90 (required).</param>
        /// <param name="longitude">From -180 to 180 (required).</param>
        public GeolocationSpoofingOptions(float latitude = default, float longitude = default)
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
        }

        /// <summary>
        /// From -90 to 90
        /// </summary>
        /// <value>From -90 to 90</value>
        /*
        <example>59.43984</example>
        */
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        public float Latitude { get; set; }

        /// <summary>
        /// From -180 to 180
        /// </summary>
        /// <value>From -180 to 180</value>
        /*
        <example>24.75815</example>
        */
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        public float Longitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeolocationSpoofingOptions {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
