/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// Status information about the profile
    /// </summary>
    [DataContract(Name = "StatusResponse")]
    public partial class StatusResponse : IValidatableObject
    {

        /// <summary>
        /// Represents the lifetime states of a profile, indicating which actions  can be performed with the associated browser engine at each state. Possible values are:  - Created: Profile is created; the associated browser engine is not started.  - Starting: The associated browser engine is starting.  - Running: The associated browser engine is currently running.  - Terminating: The associated browser engine is in the process of terminating.  - Terminated: The associated browser engine is not running but has been started at least once.  - Locked: The profile is currently being used by another user.  - Loading: The profile data or the browser engine is syncing with the cloud storage.  - Unknown: State of the profile is undefined.
        /// </summary>
        /// <value>Represents the lifetime states of a profile, indicating which actions  can be performed with the associated browser engine at each state. Possible values are:  - Created: Profile is created; the associated browser engine is not started.  - Starting: The associated browser engine is starting.  - Running: The associated browser engine is currently running.  - Terminating: The associated browser engine is in the process of terminating.  - Terminated: The associated browser engine is not running but has been started at least once.  - Locked: The profile is currently being used by another user.  - Loading: The profile data or the browser engine is syncing with the cloud storage.  - Unknown: State of the profile is undefined.</value>
        [DataMember(Name = "lifetimeState", IsRequired = true, EmitDefaultValue = true)]
        public ProfileLifetimeState LifetimeState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusResponse" /> class.
        /// </summary>
        /// <param name="lifetimeState">Represents the lifetime states of a profile, indicating which actions  can be performed with the associated browser engine at each state. Possible values are:  - Created: Profile is created; the associated browser engine is not started.  - Starting: The associated browser engine is starting.  - Running: The associated browser engine is currently running.  - Terminating: The associated browser engine is in the process of terminating.  - Terminated: The associated browser engine is not running but has been started at least once.  - Locked: The profile is currently being used by another user.  - Loading: The profile data or the browser engine is syncing with the cloud storage.  - Unknown: State of the profile is undefined. (required).</param>
        public StatusResponse(ProfileLifetimeState lifetimeState = default)
        {
            this.LifetimeState = lifetimeState;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusResponse {\n");
            sb.Append("  LifetimeState: ").Append(LifetimeState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
