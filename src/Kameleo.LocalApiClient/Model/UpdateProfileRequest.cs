/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// UpdateProfileRequest
    /// </summary>
    [DataContract(Name = "UpdateProfileRequest")]
    public partial class UpdateProfileRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Canvas
        /// </summary>
        [DataMember(Name = "canvas", EmitDefaultValue = false)]
        public CanvasSpoofingType? Canvas { get; set; }

        /// <summary>
        /// Gets or Sets Webgl
        /// </summary>
        [DataMember(Name = "webgl", EmitDefaultValue = false)]
        public WebglSpoofingType? Webgl { get; set; }

        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name = "audio", EmitDefaultValue = false)]
        public AudioSpoofingType? Audio { get; set; }

        /// <summary>
        /// Gets or Sets Fonts
        /// </summary>
        [DataMember(Name = "fonts", EmitDefaultValue = false)]
        public FontSpoofingType? Fonts { get; set; }

        /// <summary>
        /// Gets or Sets PasswordManager
        /// </summary>
        [DataMember(Name = "passwordManager", EmitDefaultValue = false)]
        public PasswordManagerType? PasswordManager { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public ProfileStorageLocation? Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProfileRequest" /> class.
        /// </summary>
        /// <param name="name">Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator..</param>
        /// <param name="folderId">Id of the folder the profile should be moved to..</param>
        /// <param name="tags">Profile tags.</param>
        /// <param name="canvas">canvas.</param>
        /// <param name="webgl">webgl.</param>
        /// <param name="webglMeta">webglMeta.</param>
        /// <param name="audio">audio.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="geolocation">geolocation.</param>
        /// <param name="proxy">proxy.</param>
        /// <param name="webRtc">webRtc.</param>
        /// <param name="fonts">fonts.</param>
        /// <param name="screen">screen.</param>
        /// <param name="hardwareConcurrency">hardwareConcurrency.</param>
        /// <param name="deviceMemory">deviceMemory.</param>
        /// <param name="language">Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code..</param>
        /// <param name="startPage">This website will be opened in the browser when the profile launches..</param>
        /// <param name="passwordManager">passwordManager.</param>
        /// <param name="extensions">A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons..</param>
        /// <param name="notes">A free text including any notes written by the user..</param>
        /// <param name="storage">storage.</param>
        public UpdateProfileRequest(string name = default(string), Guid? folderId = default(Guid?), List<string> tags = default(List<string>), CanvasSpoofingType? canvas = default(CanvasSpoofingType?), WebglSpoofingType? webgl = default(WebglSpoofingType?), WebglMetaChoice webglMeta = default(WebglMetaChoice), AudioSpoofingType? audio = default(AudioSpoofingType?), TimezoneChoice timezone = default(TimezoneChoice), GeolocationChoice geolocation = default(GeolocationChoice), ProxyChoice proxy = default(ProxyChoice), WebRtcChoice webRtc = default(WebRtcChoice), FontSpoofingType? fonts = default(FontSpoofingType?), ScreenChoice screen = default(ScreenChoice), HardwareConcurrencyChoice hardwareConcurrency = default(HardwareConcurrencyChoice), DeviceMemoryChoice deviceMemory = default(DeviceMemoryChoice), string language = default(string), string startPage = default(string), PasswordManagerType? passwordManager = default(PasswordManagerType?), List<string> extensions = default(List<string>), string notes = default(string), ProfileStorageLocation? storage = default(ProfileStorageLocation?))
        {
            this.Name = name;
            this.FolderId = folderId;
            this.Tags = tags;
            this.Canvas = canvas;
            this.Webgl = webgl;
            this.WebglMeta = webglMeta;
            this.Audio = audio;
            this.Timezone = timezone;
            this.Geolocation = geolocation;
            this.Proxy = proxy;
            this.WebRtc = webRtc;
            this.Fonts = fonts;
            this.Screen = screen;
            this.HardwareConcurrency = hardwareConcurrency;
            this.DeviceMemory = deviceMemory;
            this.Language = language;
            this.StartPage = startPage;
            this.PasswordManager = passwordManager;
            this.Extensions = extensions;
            this.Notes = notes;
            this.Storage = storage;
        }

        /// <summary>
        /// Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.
        /// </summary>
        /// <value>Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the folder the profile should be moved to.
        /// </summary>
        /// <value>Id of the folder the profile should be moved to.</value>
        [DataMember(Name = "folderId", EmitDefaultValue = true)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Profile tags
        /// </summary>
        /// <value>Profile tags</value>
        /*
        <example>[&quot;facebook&quot;,&quot;instagram&quot;]</example>
        */
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets WebglMeta
        /// </summary>
        [DataMember(Name = "webglMeta", EmitDefaultValue = false)]
        public WebglMetaChoice WebglMeta { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public TimezoneChoice Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [DataMember(Name = "geolocation", EmitDefaultValue = false)]
        public GeolocationChoice Geolocation { get; set; }

        /// <summary>
        /// Gets or Sets Proxy
        /// </summary>
        [DataMember(Name = "proxy", EmitDefaultValue = false)]
        public ProxyChoice Proxy { get; set; }

        /// <summary>
        /// Gets or Sets WebRtc
        /// </summary>
        [DataMember(Name = "webRtc", EmitDefaultValue = false)]
        public WebRtcChoice WebRtc { get; set; }

        /// <summary>
        /// Gets or Sets Screen
        /// </summary>
        [DataMember(Name = "screen", EmitDefaultValue = false)]
        public ScreenChoice Screen { get; set; }

        /// <summary>
        /// Gets or Sets HardwareConcurrency
        /// </summary>
        [DataMember(Name = "hardwareConcurrency", EmitDefaultValue = false)]
        public HardwareConcurrencyChoice HardwareConcurrency { get; set; }

        /// <summary>
        /// Gets or Sets DeviceMemory
        /// </summary>
        [DataMember(Name = "deviceMemory", EmitDefaultValue = false)]
        public DeviceMemoryChoice DeviceMemory { get; set; }

        /// <summary>
        /// Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
        /// </summary>
        /// <value>Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.</value>
        /*
        <example>en-us</example>
        */
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// This website will be opened in the browser when the profile launches.
        /// </summary>
        /// <value>This website will be opened in the browser when the profile launches.</value>
        /*
        <example>https://kameleo.io/</example>
        */
        [DataMember(Name = "startPage", EmitDefaultValue = true)]
        public string StartPage { get; set; }

        /// <summary>
        /// A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons.
        /// </summary>
        /// <value>A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons.</value>
        [DataMember(Name = "extensions", EmitDefaultValue = true)]
        public List<string> Extensions { get; set; }

        /// <summary>
        /// A free text including any notes written by the user.
        /// </summary>
        /// <value>A free text including any notes written by the user.</value>
        /*
        <example>I used this profile for affiliate marketing.</example>
        */
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateProfileRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Canvas: ").Append(Canvas).Append("\n");
            sb.Append("  Webgl: ").Append(Webgl).Append("\n");
            sb.Append("  WebglMeta: ").Append(WebglMeta).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  WebRtc: ").Append(WebRtc).Append("\n");
            sb.Append("  Fonts: ").Append(Fonts).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  HardwareConcurrency: ").Append(HardwareConcurrency).Append("\n");
            sb.Append("  DeviceMemory: ").Append(DeviceMemory).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  PasswordManager: ").Append(PasswordManager).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
