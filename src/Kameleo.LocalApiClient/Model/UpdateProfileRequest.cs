/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// UpdateProfileRequest
    /// </summary>
    [DataContract(Name = "UpdateProfileRequest")]
    public partial class UpdateProfileRequest : IValidatableObject
    {

        /// <summary>
        /// Sets how the canvas will be spoofed. Values can be &#39;intelligent&#39;, &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the canvas will be spoofed. Values can be &#39;intelligent&#39;, &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "canvas", EmitDefaultValue = true)]
        public CanvasSpoofingType? Canvas { get; set; }

        /// <summary>
        /// Sets how the WebGL will be spoofed. Values can be &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the WebGL will be spoofed. Values can be &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "webgl", EmitDefaultValue = true)]
        public WebglSpoofingType? Webgl { get; set; }

        /// <summary>
        /// Sets how the Audio will be spoofed. Values can be &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Audio will be spoofed. Values can be &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "audio", EmitDefaultValue = true)]
        public AudioSpoofingType? Audio { get; set; }

        /// <summary>
        /// Sets how the Fonts will be spoofed. Values can be &#39;enabled&#39;, &#39;disabled&#39;.
        /// </summary>
        /// <value>Sets how the Fonts will be spoofed. Values can be &#39;enabled&#39;, &#39;disabled&#39;.</value>
        [DataMember(Name = "fonts", EmitDefaultValue = true)]
        public FontSpoofingType? Fonts { get; set; }

        /// <summary>
        /// Indicates whether the browser supports saving login credentials.
        /// </summary>
        /// <value>Indicates whether the browser supports saving login credentials.</value>
        [DataMember(Name = "passwordManager", EmitDefaultValue = true)]
        public PasswordManagerType? PasswordManager { get; set; }

        /// <summary>
        /// Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated.
        /// </summary>
        /// <value>Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated.</value>
        [DataMember(Name = "storage", EmitDefaultValue = true)]
        public ProfileStorageLocation? Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProfileRequest" /> class.
        /// </summary>
        /// <param name="name">Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator..</param>
        /// <param name="folderId">Id of the folder the profile should be moved to. If null it won&#39;t be changed, if empty (00000000-0000-0000-0000-000000000000) it will be moved to root..</param>
        /// <param name="tags">Profile tags.</param>
        /// <param name="canvas">Sets how the canvas will be spoofed. Values can be &#39;intelligent&#39;, &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="webgl">Sets how the WebGL will be spoofed. Values can be &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="webglMeta">Sets how the WebGL Vendor and Renderer will be spoofed. Possible values:  &#39;automatic&#39;: The vendor and renderer values comes from the fingerprint.  &#39;manual&#39;: Manually set the vendor and renderer values.  &#39;off&#39;: Turn off the spoofing, use the original settings.</param>
        /// <param name="audio">Sets how the Audio will be spoofed. Values can be &#39;noise&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="timezone">Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;..</param>
        /// <param name="geolocation">Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="proxy">Proxy connection settings of the profiles. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server must be  provided..</param>
        /// <param name="webRtc">Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;..</param>
        /// <param name="fonts">Sets how the Fonts will be spoofed. Values can be &#39;enabled&#39;, &#39;disabled&#39;..</param>
        /// <param name="screen">Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be provided.</param>
        /// <param name="hardwareConcurrency">Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a  HardwareConcurrencyType must be provided (valid values:1, 2, 4, 8, 12, 16).</param>
        /// <param name="deviceMemory">Sets how the Device Memory will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a DeviceMemoryType  must be provided (valid values: 0.25, 0.5, 1, 2, 4, 8).</param>
        /// <param name="language">Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code..</param>
        /// <param name="startPage">This website will be opened in the browser when the profile launches..</param>
        /// <param name="passwordManager">Indicates whether the browser supports saving login credentials..</param>
        /// <param name="extensions">A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons..</param>
        /// <param name="notes">A free text including any notes written by the user..</param>
        /// <param name="storage">Profile storage property which determines where the profile is stored. The default value is &#39;local&#39;. When the value is changed the profile  will be migrated..</param>
        public UpdateProfileRequest(string name = default, Guid? folderId = default, List<string> tags = default, CanvasSpoofingType? canvas = default, WebglSpoofingType? webgl = default, WebglMetaChoice webglMeta = default, AudioSpoofingType? audio = default, TimezoneChoice timezone = default, GeolocationChoice geolocation = default, ProxyChoice proxy = default, WebRtcChoice webRtc = default, FontSpoofingType? fonts = default, ScreenChoice screen = default, HardwareConcurrencyChoice hardwareConcurrency = default, DeviceMemoryChoice deviceMemory = default, string language = default, string startPage = default, PasswordManagerType? passwordManager = default, List<string> extensions = default, string notes = default, ProfileStorageLocation? storage = default)
        {
            this.Name = name;
            this.FolderId = folderId;
            this.Tags = tags;
            this.Canvas = canvas;
            this.Webgl = webgl;
            this.WebglMeta = webglMeta;
            this.Audio = audio;
            this.Timezone = timezone;
            this.Geolocation = geolocation;
            this.Proxy = proxy;
            this.WebRtc = webRtc;
            this.Fonts = fonts;
            this.Screen = screen;
            this.HardwareConcurrency = hardwareConcurrency;
            this.DeviceMemory = deviceMemory;
            this.Language = language;
            this.StartPage = startPage;
            this.PasswordManager = passwordManager;
            this.Extensions = extensions;
            this.Notes = notes;
            this.Storage = storage;
        }

        /// <summary>
        /// Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.
        /// </summary>
        /// <value>Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the folder the profile should be moved to. If null it won&#39;t be changed, if empty (00000000-0000-0000-0000-000000000000) it will be moved to root.
        /// </summary>
        /// <value>Id of the folder the profile should be moved to. If null it won&#39;t be changed, if empty (00000000-0000-0000-0000-000000000000) it will be moved to root.</value>
        [DataMember(Name = "folderId", EmitDefaultValue = true)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Profile tags
        /// </summary>
        /// <value>Profile tags</value>
        /*
        <example>[&quot;facebook&quot;,&quot;instagram&quot;]</example>
        */
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Sets how the WebGL Vendor and Renderer will be spoofed. Possible values:  &#39;automatic&#39;: The vendor and renderer values comes from the fingerprint.  &#39;manual&#39;: Manually set the vendor and renderer values.  &#39;off&#39;: Turn off the spoofing, use the original settings
        /// </summary>
        /// <value>Sets how the WebGL Vendor and Renderer will be spoofed. Possible values:  &#39;automatic&#39;: The vendor and renderer values comes from the fingerprint.  &#39;manual&#39;: Manually set the vendor and renderer values.  &#39;off&#39;: Turn off the spoofing, use the original settings</value>
        [DataMember(Name = "webglMeta", EmitDefaultValue = true)]
        public WebglMetaChoice WebglMeta { get; set; }

        /// <summary>
        /// Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Timezone will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public TimezoneChoice Timezone { get; set; }

        /// <summary>
        /// Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the Geolocation will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "geolocation", EmitDefaultValue = true)]
        public GeolocationChoice Geolocation { get; set; }

        /// <summary>
        /// Proxy connection settings of the profiles. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server must be  provided.
        /// </summary>
        /// <value>Proxy connection settings of the profiles. Values can be &#39;none&#39;, &#39;http&#39;, &#39;socks5&#39;, &#39;ssh&#39;. When it is not set to none, a server must be  provided.</value>
        [DataMember(Name = "proxy", EmitDefaultValue = true)]
        public ProxyChoice Proxy { get; set; }

        /// <summary>
        /// Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.
        /// </summary>
        /// <value>Sets how the WebRTC will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;block&#39;, &#39;off&#39;.</value>
        [DataMember(Name = "webRtc", EmitDefaultValue = true)]
        public WebRtcChoice WebRtc { get; set; }

        /// <summary>
        /// Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be provided
        /// </summary>
        /// <value>Sets how the Screen will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a ScreenSize must be provided</value>
        [DataMember(Name = "screen", EmitDefaultValue = true)]
        public ScreenChoice Screen { get; set; }

        /// <summary>
        /// Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a  HardwareConcurrencyType must be provided (valid values:1, 2, 4, 8, 12, 16)
        /// </summary>
        /// <value>Sets how the Hardware Concurrency will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a  HardwareConcurrencyType must be provided (valid values:1, 2, 4, 8, 12, 16)</value>
        [DataMember(Name = "hardwareConcurrency", EmitDefaultValue = true)]
        public HardwareConcurrencyChoice HardwareConcurrency { get; set; }

        /// <summary>
        /// Sets how the Device Memory will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a DeviceMemoryType  must be provided (valid values: 0.25, 0.5, 1, 2, 4, 8)
        /// </summary>
        /// <value>Sets how the Device Memory will be spoofed. Values can be &#39;automatic&#39;, &#39;manual&#39;, &#39;off&#39;. When value is set to manual, a DeviceMemoryType  must be provided (valid values: 0.25, 0.5, 1, 2, 4, 8)</value>
        [DataMember(Name = "deviceMemory", EmitDefaultValue = true)]
        public DeviceMemoryChoice DeviceMemory { get; set; }

        /// <summary>
        /// Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
        /// </summary>
        /// <value>Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.</value>
        /*
        <example>en-US</example>
        */
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// This website will be opened in the browser when the profile launches.
        /// </summary>
        /// <value>This website will be opened in the browser when the profile launches.</value>
        /*
        <example>https://kameleo.io/</example>
        */
        [DataMember(Name = "startPage", EmitDefaultValue = true)]
        public string StartPage { get; set; }

        /// <summary>
        /// A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons.
        /// </summary>
        /// <value>A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons.</value>
        [DataMember(Name = "extensions", EmitDefaultValue = true)]
        public List<string> Extensions { get; set; }

        /// <summary>
        /// A free text including any notes written by the user.
        /// </summary>
        /// <value>A free text including any notes written by the user.</value>
        /*
        <example>I used this profile for affiliate marketing.</example>
        */
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateProfileRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Canvas: ").Append(Canvas).Append("\n");
            sb.Append("  Webgl: ").Append(Webgl).Append("\n");
            sb.Append("  WebglMeta: ").Append(WebglMeta).Append("\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  WebRtc: ").Append(WebRtc).Append("\n");
            sb.Append("  Fonts: ").Append(Fonts).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  HardwareConcurrency: ").Append(HardwareConcurrency).Append("\n");
            sb.Append("  DeviceMemory: ").Append(DeviceMemory).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  PasswordManager: ").Append(PasswordManager).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
