/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kameleo.LocalApiClient.Client.OpenAPIDateConverter;

namespace Kameleo.LocalApiClient.Model
{
    /// <summary>
    /// A preview about the profile with some of its properties.
    /// </summary>
    [DataContract(Name = "ProfilePreview")]
    public partial class ProfilePreview : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name = "storage", EmitDefaultValue = false)]
        public ProfileStorageLocation? Storage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilePreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfilePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilePreview" /> class.
        /// </summary>
        /// <param name="id">A unique identifier of the profile (required).</param>
        /// <param name="name">The name of the profile (required).</param>
        /// <param name="tags">Profile tags (required).</param>
        /// <param name="proxy">proxy (required).</param>
        /// <param name="createdAt">Date when the profile was created. (required).</param>
        /// <param name="device">device (required).</param>
        /// <param name="os">os (required).</param>
        /// <param name="browser">browser (required).</param>
        /// <param name="language">Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="storage">storage.</param>
        /// <param name="folderId">A unique identifier of the containing folder, or null if not in a folder. This will always be null for locally stored profiles, as only  cloud profiles can be added to folders..</param>
        public ProfilePreview(Guid id = default(Guid), string name = default(string), List<string> tags = default(List<string>), ProxyChoice proxy = default(ProxyChoice), DateTime createdAt = default(DateTime), Device device = default(Device), Os os = default(Os), Browser browser = default(Browser), string language = default(string), StatusResponse status = default(StatusResponse), ProfileStorageLocation? storage = default(ProfileStorageLocation?), Guid? folderId = default(Guid?))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProfilePreview and cannot be null");
            }
            this.Name = name;
            // to ensure "tags" is required (not null)
            if (tags == null)
            {
                throw new ArgumentNullException("tags is a required property for ProfilePreview and cannot be null");
            }
            this.Tags = tags;
            // to ensure "proxy" is required (not null)
            if (proxy == null)
            {
                throw new ArgumentNullException("proxy is a required property for ProfilePreview and cannot be null");
            }
            this.Proxy = proxy;
            this.CreatedAt = createdAt;
            // to ensure "device" is required (not null)
            if (device == null)
            {
                throw new ArgumentNullException("device is a required property for ProfilePreview and cannot be null");
            }
            this.Device = device;
            // to ensure "os" is required (not null)
            if (os == null)
            {
                throw new ArgumentNullException("os is a required property for ProfilePreview and cannot be null");
            }
            this.Os = os;
            // to ensure "browser" is required (not null)
            if (browser == null)
            {
                throw new ArgumentNullException("browser is a required property for ProfilePreview and cannot be null");
            }
            this.Browser = browser;
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for ProfilePreview and cannot be null");
            }
            this.Language = language;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ProfilePreview and cannot be null");
            }
            this.Status = status;
            this.Storage = storage;
            this.FolderId = folderId;
        }

        /// <summary>
        /// A unique identifier of the profile
        /// </summary>
        /// <value>A unique identifier of the profile</value>
        /*
        <example>a7cafbbe-6bc0-4575-8c6e-f1adf391f180</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// The name of the profile
        /// </summary>
        /// <value>The name of the profile</value>
        /*
        <example>mystic-turtle</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Profile tags
        /// </summary>
        /// <value>Profile tags</value>
        /*
        <example>[&quot;facebook&quot;,&quot;instagram&quot;]</example>
        */
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Proxy
        /// </summary>
        [DataMember(Name = "proxy", IsRequired = true, EmitDefaultValue = true)]
        public ProxyChoice Proxy { get; set; }

        /// <summary>
        /// Date when the profile was created.
        /// </summary>
        /// <value>Date when the profile was created.</value>
        /*
        <example>2020-05-02T03:10:32.245270100+10:00</example>
        */
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", IsRequired = true, EmitDefaultValue = true)]
        public Device Device { get; set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        [DataMember(Name = "os", IsRequired = true, EmitDefaultValue = true)]
        public Os Os { get; set; }

        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [DataMember(Name = "browser", IsRequired = true, EmitDefaultValue = true)]
        public Browser Browser { get; set; }

        /// <summary>
        /// Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.
        /// </summary>
        /// <value>Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.</value>
        /*
        <example>en-us</example>
        */
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusResponse Status { get; set; }

        /// <summary>
        /// A unique identifier of the containing folder, or null if not in a folder. This will always be null for locally stored profiles, as only  cloud profiles can be added to folders.
        /// </summary>
        /// <value>A unique identifier of the containing folder, or null if not in a folder. This will always be null for locally stored profiles, as only  cloud profiles can be added to folders.</value>
        /*
        <example>c7aafbbe-b6c0-5475-c66e-1fadf39180f1</example>
        */
        [DataMember(Name = "folderId", EmitDefaultValue = true)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfilePreview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
