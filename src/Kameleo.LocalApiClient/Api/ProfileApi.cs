/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: 4.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kameleo.LocalApiClient.Client;
using Kameleo.LocalApiClient.Model;

namespace Kameleo.LocalApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse CreateProfile(CreateProfileRequest createProfileRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> CreateProfileWithHttpInfo(CreateProfileRequest createProfileRequest, int operationIndex = 0);
        /// <summary>
        /// Permanently delete a profile from your workspace.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProfile(Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Permanently delete a profile from your workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProfileWithHttpInfo(Guid profileId, int operationIndex = 0);
        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse DuplicateProfile(Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> DuplicateProfileWithHttpInfo(Guid profileId, int operationIndex = 0);
        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse ExportProfile(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0);

        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> ExportProfileWithHttpInfo(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0);
        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse GetProfileStatus(Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> GetProfileStatusWithHttpInfo(Guid profileId, int operationIndex = 0);
        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse ImportProfile(ImportProfileRequest importProfileRequest = default, int operationIndex = 0);

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> ImportProfileWithHttpInfo(ImportProfileRequest importProfileRequest = default, int operationIndex = 0);
        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProfilePreview&gt;</returns>
        List<ProfilePreview> ListProfiles(int operationIndex = 0);

        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProfilePreview&gt;</returns>
        ApiResponse<List<ProfilePreview>> ListProfilesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse ReadProfile(Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> ReadProfileWithHttpInfo(Guid profileId, int operationIndex = 0);
        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse StartProfile(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0);

        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> StartProfileWithHttpInfo(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0);
        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse StopProfile(Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> StopProfileWithHttpInfo(Guid profileId, int operationIndex = 0);
        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse UpdateProfile(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0);

        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> UpdateProfileWithHttpInfo(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0);
        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse UpgradeProfileKernel(Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> UpgradeProfileKernelWithHttpInfo(Guid profileId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> CreateProfileAsync(CreateProfileRequest createProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> CreateProfileWithHttpInfoAsync(CreateProfileRequest createProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Permanently delete a profile from your workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Permanently delete a profile from your workspace.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> DuplicateProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> DuplicateProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> ExportProfileAsync(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> ExportProfileWithHttpInfoAsync(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> GetProfileStatusAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> GetProfileStatusWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> ImportProfileAsync(ImportProfileRequest importProfileRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> ImportProfileWithHttpInfoAsync(ImportProfileRequest importProfileRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProfilePreview&gt;</returns>
        System.Threading.Tasks.Task<List<ProfilePreview>> ListProfilesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProfilePreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfilePreview>>> ListProfilesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> ReadProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> ReadProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> StartProfileAsync(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> StartProfileWithHttpInfoAsync(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> StopProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> StopProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> UpdateProfileAsync(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> UpdateProfileWithHttpInfoAsync(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> UpgradeProfileKernelAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> UpgradeProfileKernelWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfileApi : IProfileApiSync, IProfileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfileApi : IProfileApi
    {
        private Kameleo.LocalApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfileApi(string basePath)
        {
            this.Configuration = Kameleo.LocalApiClient.Client.Configuration.MergeConfigurations(
                Kameleo.LocalApiClient.Client.GlobalConfiguration.Instance,
                new Kameleo.LocalApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfileApi(Kameleo.LocalApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kameleo.LocalApiClient.Client.Configuration.MergeConfigurations(
                Kameleo.LocalApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProfileApi(Kameleo.LocalApiClient.Client.ISynchronousClient client, Kameleo.LocalApiClient.Client.IAsynchronousClient asyncClient, Kameleo.LocalApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kameleo.LocalApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kameleo.LocalApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kameleo.LocalApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kameleo.LocalApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse CreateProfile(CreateProfileRequest createProfileRequest, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = CreateProfileWithHttpInfo(createProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> CreateProfileWithHttpInfo(CreateProfileRequest createProfileRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createProfileRequest' is set
            if (createProfileRequest == null)
            {
                throw new Kameleo.LocalApiClient.Client.ApiException(400, "Missing required parameter 'createProfileRequest' when calling ProfileApi->CreateProfile");
            }

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.CreateProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileResponse>("/profiles/new", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> CreateProfileAsync(CreateProfileRequest createProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await CreateProfileWithHttpInfoAsync(createProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new profile based on a selected fingerprint. Supply the required configuration in the request body, then receive the newly  created profile’s full details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> CreateProfileWithHttpInfoAsync(CreateProfileRequest createProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'createProfileRequest' is set
            if (createProfileRequest == null)
            {
                throw new Kameleo.LocalApiClient.Client.ApiException(400, "Missing required parameter 'createProfileRequest' when calling ProfileApi->CreateProfile");
            }


            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.CreateProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileResponse>("/profiles/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently delete a profile from your workspace. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProfile(Guid profileId, int operationIndex = 0)
        {
            DeleteProfileWithHttpInfo(profileId);
        }

        /// <summary>
        /// Permanently delete a profile from your workspace. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<Object> DeleteProfileWithHttpInfo(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.DeleteProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/profiles/{profileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently delete a profile from your workspace. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteProfileWithHttpInfoAsync(profileId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Permanently delete a profile from your workspace. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<Object>> DeleteProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.DeleteProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/profiles/{profileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse DuplicateProfile(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = DuplicateProfileWithHttpInfo(profileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> DuplicateProfileWithHttpInfo(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.DuplicateProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileResponse>("/profiles/{profileId}/duplicate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DuplicateProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> DuplicateProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await DuplicateProfileWithHttpInfoAsync(profileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate an existing profile by creating an exact copy with a new unique identifier. Use this endpoint to clone a profile while preserving  all its configuration details and data. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> DuplicateProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.DuplicateProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileResponse>("/profiles/{profileId}/duplicate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DuplicateProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse ExportProfile(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = ExportProfileWithHttpInfo(profileId, exportProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> ExportProfileWithHttpInfo(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0)
        {
            // verify the required parameter 'exportProfileRequest' is set
            if (exportProfileRequest == null)
            {
                throw new Kameleo.LocalApiClient.Client.ApiException(400, "Missing required parameter 'exportProfileRequest' when calling ProfileApi->ExportProfile");
            }

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            localVarRequestOptions.Data = exportProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.ExportProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileResponse>("/profiles/{profileId}/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> ExportProfileAsync(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await ExportProfileWithHttpInfoAsync(profileId, exportProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a profile to a .kameleo file by providing the target file path in the request body. Use this to back up all profile attributes —  including settings, browsing data, cookies, history, bookmarks, and extensions — for later restoration or migration. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="exportProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> ExportProfileWithHttpInfoAsync(Guid profileId, ExportProfileRequest exportProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'exportProfileRequest' is set
            if (exportProfileRequest == null)
            {
                throw new Kameleo.LocalApiClient.Client.ApiException(400, "Missing required parameter 'exportProfileRequest' when calling ProfileApi->ExportProfile");
            }


            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            localVarRequestOptions.Data = exportProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.ExportProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileResponse>("/profiles/{profileId}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse GetProfileStatus(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> localVarResponse = GetProfileStatusWithHttpInfo(profileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> GetProfileStatusWithHttpInfo(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.GetProfileStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StatusResponse>("/profiles/{profileId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> GetProfileStatusAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> localVarResponse = await GetProfileStatusWithHttpInfoAsync(profileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the current status of a profile, including its lifecycle and persistence states. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse>> GetProfileStatusWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.GetProfileStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StatusResponse>("/profiles/{profileId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse ImportProfile(ImportProfileRequest importProfileRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = ImportProfileWithHttpInfo(importProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> ImportProfileWithHttpInfo(ImportProfileRequest importProfileRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = importProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.ImportProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileResponse>("/profiles/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> ImportProfileAsync(ImportProfileRequest importProfileRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await ImportProfileWithHttpInfoAsync(importProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the profile with all its attributes, including settings, browsing data,  cookies, history, bookmarks, and any installed extensions/addons. If the profile is already loaded, the import process will fail. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importProfileRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> ImportProfileWithHttpInfoAsync(ImportProfileRequest importProfileRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = importProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.ImportProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileResponse>("/profiles/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ProfilePreview&gt;</returns>
        public List<ProfilePreview> ListProfiles(int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<List<ProfilePreview>> localVarResponse = ListProfilesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ProfilePreview&gt;</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<List<ProfilePreview>> ListProfilesWithHttpInfo(int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProfileApi.ListProfiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProfilePreview>>("/profiles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProfiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProfilePreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfilePreview>> ListProfilesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<List<ProfilePreview>> localVarResponse = await ListProfilesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of all profiles loaded in your workspace. Use this endpoint to view a preview of each profile so you can quickly assess  available profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProfilePreview&gt;)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<List<ProfilePreview>>> ListProfilesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProfileApi.ListProfiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProfilePreview>>("/profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProfiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse ReadProfile(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = ReadProfileWithHttpInfo(profileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> ReadProfileWithHttpInfo(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.ReadProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProfileResponse>("/profiles/{profileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> ReadProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await ReadProfileWithHttpInfoAsync(profileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the profile with the specified GUID from the current workspace. On startup, Kameleo will automatically scan and load profiles stored  in your workspace folder on startup. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> ReadProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.ReadProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProfileResponse>("/profiles/{profileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse StartProfile(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> localVarResponse = StartProfileWithHttpInfo(profileId, browserSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> StartProfileWithHttpInfo(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            localVarRequestOptions.Data = browserSettings;

            localVarRequestOptions.Operation = "ProfileApi.StartProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/profiles/{profileId}/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> StartProfileAsync(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> localVarResponse = await StartProfileWithHttpInfoAsync(profileId, browserSettings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts the selected profile by transitioning its status to &#39;starting&#39;, launching the kernel (Chroma or Junglefox) associated with the  profile, and then changing its status to &#39;running&#39;.  If there is an error during start-up, it will be &#39;terminated&#39;. Note that the required kernel might not be available locally, so it may be  downloaded during the profile start.  Optional command line arguments or settings can be passed to the browser engines. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="browserSettings"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse>> StartProfileWithHttpInfoAsync(Guid profileId, BrowserSettings browserSettings = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            localVarRequestOptions.Data = browserSettings;

            localVarRequestOptions.Operation = "ProfileApi.StartProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/profiles/{profileId}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse StopProfile(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> localVarResponse = StopProfileWithHttpInfo(profileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> StopProfileWithHttpInfo(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.StopProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/profiles/{profileId}/stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> StopProfileAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse> localVarResponse = await StopProfileWithHttpInfoAsync(profileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a running profile by gracefully shutting down its browser engine and releasing allocated resources. Use this endpoint to transition  the profile from &#39;running&#39; to &#39;terminated&#39; state. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<StatusResponse>> StopProfileWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.StopProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/profiles/{profileId}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse UpdateProfile(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = UpdateProfileWithHttpInfo(profileId, updateProfileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> UpdateProfileWithHttpInfo(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateProfileRequest' is set
            if (updateProfileRequest == null)
            {
                throw new Kameleo.LocalApiClient.Client.ApiException(400, "Missing required parameter 'updateProfileRequest' when calling ProfileApi->UpdateProfile");
            }

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            localVarRequestOptions.Data = updateProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.UpdateProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ProfileResponse>("/profiles/{profileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> UpdateProfileAsync(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await UpdateProfileWithHttpInfoAsync(profileId, updateProfileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing profile’s settings by providing the new configuration options in the request body. Use this to modify aspects like  spoofing options or proxy settings, then receive the updated profile details. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> UpdateProfileWithHttpInfoAsync(Guid profileId, UpdateProfileRequest updateProfileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'updateProfileRequest' is set
            if (updateProfileRequest == null)
            {
                throw new Kameleo.LocalApiClient.Client.ApiException(400, "Missing required parameter 'updateProfileRequest' when calling ProfileApi->UpdateProfile");
            }


            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter
            localVarRequestOptions.Data = updateProfileRequest;

            localVarRequestOptions.Operation = "ProfileApi.UpdateProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProfileResponse>("/profiles/{profileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse UpgradeProfileKernel(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = UpgradeProfileKernelWithHttpInfo(profileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> UpgradeProfileKernelWithHttpInfo(Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.UpgradeProfileKernel";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileResponse>("/profiles/{profileId}/upgrade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpgradeProfileKernel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> UpgradeProfileKernelAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await UpgradeProfileKernelWithHttpInfoAsync(profileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upgrades the profile&#39;s fingerprint to the most recent browser version available from the server.  This also updates the profile&#39;s corresponding kernel if there&#39;s a better match available for the new fingerprint.  The new fingerprint is tailored to the profile&#39;s current device, browser and operating system. Note that upgrading a profile&#39;s kernel will alter its browser fingerprint. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The unique identifier of the profile</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> UpgradeProfileKernelWithHttpInfoAsync(Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "ProfileApi.UpgradeProfileKernel";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileResponse>("/profiles/{profileId}/upgrade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpgradeProfileKernel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
