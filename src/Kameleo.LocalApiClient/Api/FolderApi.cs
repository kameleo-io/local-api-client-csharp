/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kameleo.LocalApiClient.Client;
using Kameleo.LocalApiClient.Model;

namespace Kameleo.LocalApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFolderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds the given profile to the specified folder.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse AddProfileToFolder(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0);

        /// <summary>
        /// Adds the given profile to the specified folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> AddProfileToFolderWithHttpInfo(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0);
        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        FolderResponse CreateFolder(CreateFolderRequest createFolderRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        ApiResponse<FolderResponse> CreateFolderWithHttpInfo(CreateFolderRequest createFolderRequest = default, int operationIndex = 0);
        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteFolderResponse</returns>
        DeleteFolderResponse DeleteFolder(Guid guid, bool? includeProfiles = default, int operationIndex = 0);

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteFolderResponse</returns>
        ApiResponse<DeleteFolderResponse> DeleteFolderWithHttpInfo(Guid guid, bool? includeProfiles = default, int operationIndex = 0);
        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFoldersResponse</returns>
        ListFoldersResponse ListFolders(int operationIndex = 0);

        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFoldersResponse</returns>
        ApiResponse<ListFoldersResponse> ListFoldersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        FolderResponse ReadFolder(Guid guid, int operationIndex = 0);

        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        ApiResponse<FolderResponse> ReadFolderWithHttpInfo(Guid guid, int operationIndex = 0);
        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharingOptionsResponse</returns>
        SharingOptionsResponse ReadSharingOptions(int operationIndex = 0);

        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharingOptionsResponse</returns>
        ApiResponse<SharingOptionsResponse> ReadSharingOptionsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Removes the given profile from the specified folder.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        ProfileResponse RemoveProfileFromFolder(Guid guid, Guid profileId, int operationIndex = 0);

        /// <summary>
        /// Removes the given profile from the specified folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        ApiResponse<ProfileResponse> RemoveProfileFromFolderWithHttpInfo(Guid guid, Guid profileId, int operationIndex = 0);
        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        FolderResponse ShareGroup(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0);

        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        ApiResponse<FolderResponse> ShareGroupWithHttpInfo(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0);
        /// <summary>
        /// Updates the details of an existing folder, not including its content.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        FolderResponse UpdateFolder(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0);

        /// <summary>
        /// Updates the details of an existing folder, not including its content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        ApiResponse<FolderResponse> UpdateFolderWithHttpInfo(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFolderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds the given profile to the specified folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> AddProfileToFolderAsync(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the given profile to the specified folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> AddProfileToFolderWithHttpInfoAsync(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        System.Threading.Tasks.Task<FolderResponse> CreateFolderAsync(CreateFolderRequest createFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderResponse>> CreateFolderWithHttpInfoAsync(CreateFolderRequest createFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteFolderResponse</returns>
        System.Threading.Tasks.Task<DeleteFolderResponse> DeleteFolderAsync(Guid guid, bool? includeProfiles = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteFolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteFolderResponse>> DeleteFolderWithHttpInfoAsync(Guid guid, bool? includeProfiles = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFoldersResponse</returns>
        System.Threading.Tasks.Task<ListFoldersResponse> ListFoldersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFoldersResponse>> ListFoldersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        System.Threading.Tasks.Task<FolderResponse> ReadFolderAsync(Guid guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderResponse>> ReadFolderWithHttpInfoAsync(Guid guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharingOptionsResponse</returns>
        System.Threading.Tasks.Task<SharingOptionsResponse> ReadSharingOptionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharingOptionsResponse>> ReadSharingOptionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Removes the given profile from the specified folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        System.Threading.Tasks.Task<ProfileResponse> RemoveProfileFromFolderAsync(Guid guid, Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Removes the given profile from the specified folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileResponse>> RemoveProfileFromFolderWithHttpInfoAsync(Guid guid, Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        System.Threading.Tasks.Task<FolderResponse> ShareGroupAsync(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderResponse>> ShareGroupWithHttpInfoAsync(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates the details of an existing folder, not including its content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        System.Threading.Tasks.Task<FolderResponse> UpdateFolderAsync(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the details of an existing folder, not including its content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FolderResponse>> UpdateFolderWithHttpInfoAsync(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFolderApi : IFolderApiSync, IFolderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FolderApi : IFolderApi
    {
        private Kameleo.LocalApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FolderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FolderApi(string basePath)
        {
            this.Configuration = Kameleo.LocalApiClient.Client.Configuration.MergeConfigurations(
                Kameleo.LocalApiClient.Client.GlobalConfiguration.Instance,
                new Kameleo.LocalApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FolderApi(Kameleo.LocalApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kameleo.LocalApiClient.Client.Configuration.MergeConfigurations(
                Kameleo.LocalApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FolderApi(Kameleo.LocalApiClient.Client.ISynchronousClient client, Kameleo.LocalApiClient.Client.IAsynchronousClient asyncClient, Kameleo.LocalApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kameleo.LocalApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kameleo.LocalApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kameleo.LocalApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kameleo.LocalApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds the given profile to the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse AddProfileToFolder(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = AddProfileToFolderWithHttpInfo(guid, addProfileToFolderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the given profile to the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> AddProfileToFolderWithHttpInfo(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = addProfileToFolderRequest;

            localVarRequestOptions.Operation = "FolderApi.AddProfileToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfileResponse>("/folders/{guid}/add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProfileToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds the given profile to the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> AddProfileToFolderAsync(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await AddProfileToFolderWithHttpInfoAsync(guid, addProfileToFolderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds the given profile to the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="addProfileToFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> AddProfileToFolderWithHttpInfoAsync(Guid guid, AddProfileToFolderRequest addProfileToFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = addProfileToFolderRequest;

            localVarRequestOptions.Operation = "FolderApi.AddProfileToFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProfileResponse>("/folders/{guid}/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProfileToFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        public FolderResponse CreateFolder(CreateFolderRequest createFolderRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = CreateFolderWithHttpInfo(createFolderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> CreateFolderWithHttpInfo(CreateFolderRequest createFolderRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFolderRequest;

            localVarRequestOptions.Operation = "FolderApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FolderResponse>("/folders/new", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        public async System.Threading.Tasks.Task<FolderResponse> CreateFolderAsync(CreateFolderRequest createFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = await CreateFolderWithHttpInfoAsync(createFolderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new folder in your workspace by providing a human-readable name in the request body. Use this to organize your profiles  effectively. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse>> CreateFolderWithHttpInfoAsync(CreateFolderRequest createFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFolderRequest;

            localVarRequestOptions.Operation = "FolderApi.CreateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FolderResponse>("/folders/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteFolderResponse</returns>
        public DeleteFolderResponse DeleteFolder(Guid guid, bool? includeProfiles = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<DeleteFolderResponse> localVarResponse = DeleteFolderWithHttpInfo(guid, includeProfiles);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteFolderResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<DeleteFolderResponse> DeleteFolderWithHttpInfo(Guid guid, bool? includeProfiles = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            if (includeProfiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "includeProfiles", includeProfiles));
            }

            localVarRequestOptions.Operation = "FolderApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteFolderResponse>("/folders/{guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteFolderResponse</returns>
        public async System.Threading.Tasks.Task<DeleteFolderResponse> DeleteFolderAsync(Guid guid, bool? includeProfiles = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<DeleteFolderResponse> localVarResponse = await DeleteFolderWithHttpInfoAsync(guid, includeProfiles, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the folder will either be deleted or moved to the top-level based on the  query parameters. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="includeProfiles">Flag to indicate if the contained profiles should be deleted (true) or moved to the top-level (false). (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteFolderResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<DeleteFolderResponse>> DeleteFolderWithHttpInfoAsync(Guid guid, bool? includeProfiles = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            if (includeProfiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "includeProfiles", includeProfiles));
            }

            localVarRequestOptions.Operation = "FolderApi.DeleteFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteFolderResponse>("/folders/{guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFoldersResponse</returns>
        public ListFoldersResponse ListFolders(int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ListFoldersResponse> localVarResponse = ListFoldersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFoldersResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ListFoldersResponse> ListFoldersWithHttpInfo(int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FolderApi.ListFolders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFoldersResponse>("/folders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFoldersResponse</returns>
        public async System.Threading.Tasks.Task<ListFoldersResponse> ListFoldersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ListFoldersResponse> localVarResponse = await ListFoldersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the complete list of folders in your workspace. Use this endpoint to see the entire folder hierarchy - including subfolders and  unassigned profiles. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFoldersResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ListFoldersResponse>> ListFoldersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FolderApi.ListFolders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFoldersResponse>("/folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        public FolderResponse ReadFolder(Guid guid, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = ReadFolderWithHttpInfo(guid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> ReadFolderWithHttpInfo(Guid guid, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "FolderApi.ReadFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<FolderResponse>("/folders/{guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        public async System.Threading.Tasks.Task<FolderResponse> ReadFolderAsync(Guid guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = await ReadFolderWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch detailed information for a specific folder by its unique GUID. Use this to review the folder’s metadata, contained profiles, and  sharing settings. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse>> ReadFolderWithHttpInfoAsync(Guid guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "FolderApi.ReadFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FolderResponse>("/folders/{guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SharingOptionsResponse</returns>
        public SharingOptionsResponse ReadSharingOptions(int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<SharingOptionsResponse> localVarResponse = ReadSharingOptionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SharingOptionsResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<SharingOptionsResponse> ReadSharingOptionsWithHttpInfo(int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FolderApi.ReadSharingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SharingOptionsResponse>("/folders/share", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSharingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<SharingOptionsResponse> ReadSharingOptionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<SharingOptionsResponse> localVarResponse = await ReadSharingOptionsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the sharing options available for folders. Use this endpoint to review the list of users and roles that can access your folder  resources. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<SharingOptionsResponse>> ReadSharingOptionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FolderApi.ReadSharingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SharingOptionsResponse>("/folders/share", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSharingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the given profile from the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProfileResponse</returns>
        public ProfileResponse RemoveProfileFromFolder(Guid guid, Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = RemoveProfileFromFolderWithHttpInfo(guid, profileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the given profile from the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProfileResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> RemoveProfileFromFolderWithHttpInfo(Guid guid, Guid profileId, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "FolderApi.RemoveProfileFromFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProfileResponse>("/folders/{guid}/{profileId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProfileFromFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes the given profile from the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfileResponse> RemoveProfileFromFolderAsync(Guid guid, Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse> localVarResponse = await RemoveProfileFromFolderWithHttpInfoAsync(guid, profileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes the given profile from the specified folder. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="profileId">The unique identifier of the profile.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<ProfileResponse>> RemoveProfileFromFolderWithHttpInfoAsync(Guid guid, Guid profileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.PathParameters.Add("profileId", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(profileId)); // path parameter

            localVarRequestOptions.Operation = "FolderApi.RemoveProfileFromFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProfileResponse>("/folders/{guid}/{profileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProfileFromFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        public FolderResponse ShareGroup(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = ShareGroupWithHttpInfo(guid, shareGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> ShareGroupWithHttpInfo(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = shareGroupRequest;

            localVarRequestOptions.Operation = "FolderApi.ShareGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FolderResponse>("/folders/{guid}/share", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShareGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        public async System.Threading.Tasks.Task<FolderResponse> ShareGroupAsync(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = await ShareGroupWithHttpInfoAsync(guid, shareGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the sharing settings for a folder by submitting a list of share access rules (user and role details) in the request body. Use this  to adjust access permissions as needed. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="shareGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse>> ShareGroupWithHttpInfoAsync(Guid guid, ShareGroupRequest shareGroupRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = shareGroupRequest;

            localVarRequestOptions.Operation = "FolderApi.ShareGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FolderResponse>("/folders/{guid}/share", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShareGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the details of an existing folder, not including its content. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FolderResponse</returns>
        public FolderResponse UpdateFolder(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = UpdateFolderWithHttpInfo(guid, updateFolderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of an existing folder, not including its content. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FolderResponse</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> UpdateFolderWithHttpInfo(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = updateFolderRequest;

            localVarRequestOptions.Operation = "FolderApi.UpdateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<FolderResponse>("/folders/{guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the details of an existing folder, not including its content. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FolderResponse</returns>
        public async System.Threading.Tasks.Task<FolderResponse> UpdateFolderAsync(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse> localVarResponse = await UpdateFolderWithHttpInfoAsync(guid, updateFolderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the details of an existing folder, not including its content. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the folder.</param>
        /// <param name="updateFolderRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FolderResponse)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<FolderResponse>> UpdateFolderWithHttpInfoAsync(Guid guid, UpdateFolderRequest updateFolderRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Kameleo.LocalApiClient.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = updateFolderRequest;

            localVarRequestOptions.Operation = "FolderApi.UpdateFolder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FolderResponse>("/folders/{guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
