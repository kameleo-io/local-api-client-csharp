/*
 * kameleo-local-api
 *
 * You can use the following API endpoints to communicate with the local running Kameleo programmatically.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kameleo.LocalApiClient.Client;
using Kameleo.LocalApiClient.Model;

namespace Kameleo.LocalApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFingerprintApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FingerprintPreview&gt;</returns>
        List<FingerprintPreview> SearchFingerprints(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FingerprintPreview&gt;</returns>
        ApiResponse<List<FingerprintPreview>> SearchFingerprintsWithHttpInfo(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFingerprintApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FingerprintPreview&gt;</returns>
        System.Threading.Tasks.Task<List<FingerprintPreview>> SearchFingerprintsAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FingerprintPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FingerprintPreview>>> SearchFingerprintsWithHttpInfoAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFingerprintApi : IFingerprintApiSync, IFingerprintApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FingerprintApi : IFingerprintApi
    {
        private Kameleo.LocalApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FingerprintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FingerprintApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FingerprintApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FingerprintApi(string basePath)
        {
            this.Configuration = Kameleo.LocalApiClient.Client.Configuration.MergeConfigurations(
                Kameleo.LocalApiClient.Client.GlobalConfiguration.Instance,
                new Kameleo.LocalApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FingerprintApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FingerprintApi(Kameleo.LocalApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kameleo.LocalApiClient.Client.Configuration.MergeConfigurations(
                Kameleo.LocalApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kameleo.LocalApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FingerprintApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FingerprintApi(Kameleo.LocalApiClient.Client.ISynchronousClient client, Kameleo.LocalApiClient.Client.IAsynchronousClient asyncClient, Kameleo.LocalApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kameleo.LocalApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kameleo.LocalApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kameleo.LocalApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kameleo.LocalApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kameleo.LocalApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FingerprintPreview&gt;</returns>
        public List<FingerprintPreview> SearchFingerprints(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.ApiResponse<List<FingerprintPreview>> localVarResponse = SearchFingerprintsWithHttpInfo(deviceType, osFamily, browserProduct, browserVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FingerprintPreview&gt;</returns>
        public Kameleo.LocalApiClient.Client.ApiResponse<List<FingerprintPreview>> SearchFingerprintsWithHttpInfo(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0)
        {
            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (deviceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "deviceType", deviceType));
            }
            if (osFamily != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "osFamily", osFamily));
            }
            if (browserProduct != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "browserProduct", browserProduct));
            }
            if (browserVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "browserVersion", browserVersion));
            }

            localVarRequestOptions.Operation = "FingerprintApi.SearchFingerprints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FingerprintPreview>>("/fingerprints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchFingerprints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FingerprintPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<FingerprintPreview>> SearchFingerprintsAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Kameleo.LocalApiClient.Client.ApiResponse<List<FingerprintPreview>> localVarResponse = await SearchFingerprintsWithHttpInfoAsync(deviceType, osFamily, browserProduct, browserVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints. 
        /// </summary>
        /// <exception cref="Kameleo.LocalApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceType">Filter option for the Device Type. Possible values are &#39;desktop&#39;, &#39;mobile&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="osFamily">Filter option for os family. Possible values are &#39;windows&#39;, &#39;macos&#39;, &#39;linux&#39;, &#39;android&#39;, &#39;ios&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserProduct">Filter option for browser product. Possible values are &#39;chrome&#39;, &#39;firefox&#39;, &#39;edge&#39;, &#39;safari&#39;.  You can also use a comma-separated list to provide more than one value. (optional)</param>
        /// <param name="browserVersion">Filter option for the browser version.  Includes an optional sign (&lt;, &gt;&#x3D;, etc.) and a major version number (e.g. 135) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FingerprintPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<Kameleo.LocalApiClient.Client.ApiResponse<List<FingerprintPreview>>> SearchFingerprintsWithHttpInfoAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string browserVersion = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Kameleo.LocalApiClient.Client.RequestOptions localVarRequestOptions = new Kameleo.LocalApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kameleo.LocalApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (deviceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "deviceType", deviceType));
            }
            if (osFamily != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "osFamily", osFamily));
            }
            if (browserProduct != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "browserProduct", browserProduct));
            }
            if (browserVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kameleo.LocalApiClient.Client.ClientUtils.ParameterToMultiMap("", "browserVersion", browserVersion));
            }

            localVarRequestOptions.Operation = "FingerprintApi.SearchFingerprints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FingerprintPreview>>("/fingerprints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchFingerprints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
